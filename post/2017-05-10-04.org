#+ORG2BLOG:
-*- mode: ag; default-directory: "~/git/github/wisdomandwonder/post/" -*-
Ag started at Wed May 10 19:17:50

ag --literal --group --line-number --column --color --color-match 30\;43 --color-path 1\;32 --smart-case -i --stats -- programming .
File: 2007-12-14-8.org
5:19:#+TAGS: .NET, F#, Programming Language
8:77:One of the most common reasons cited for not learning more about functional programming is the lack of both good libraries and good development environments. This is a little bit surprising, because when it comes to learning a language, these two features are likely to have the /least/ impact on the learning process. Despite that, this lament continues; there must be more to it!
10:133:Programmers, like most folks today, are largely short on time. Wherever they invest it, they expect a good return. When it comes to programming, every programmer hopes that the investment he makes in learning a new language has at least a /fighting chance/ at being applied to solving a /billable problem/. 
12:90:F# completely blows away these two huge barriers to folks learning more about functional programming: it has complete access to the .NET platform and has excellent integration with Visual Studio .NET. 
14:84:This is very, very exciting: even if a programmer never ends up using a functional programming language for billing work, he will have had a lot of fun learning a new paradigm, and will be a better programmer for it!

File: 2007-12-14-10.org
5:24:#+TAGS: .NET, F Sharp, Programming Language

File: 2007-12-14-7.org
5:15:#+TAGS: .NET, Programming Language
10:351:As it turns out, although F# did not get released with VS08, [[http://blogs.msdn.com/dsyme/archive/2007/11/30/full-release-notes-for-f-1-9-3-7.aspx][F# RC 1.9.3.7]] is available in the form of a stand alone installer which provides VS08 integration. Installation is fast and easy, and in no time you will be up and running with a powerful functional programming language, a great IDE, and full access to the latest and greatest APIs that Microsoft has to offer. The following is a screenshot with a few niceties highlighted in blue:

File: 2007-12-14-9.org
5:26:#+TAGS: Learning, Music, Programming
10:21:How do you practice programming?

File: 2007-12-17-12.org
5:9:#+TAGS: Programming Language
8:43:One common complaint about non-mainstream programming languages is that there hasn't been any "real code" written in that particular language. One response to this is the [[http://www.gigamonkeys.com/book/][Practical Common Lisp]] book. 

File: 2007-12-16-11.org
5:15:#+TAGS: .NET, Programming Language

File: 2007-12-17-13.org
5:14:#+TAGS: C++, Programming Language
14:219:For someone pretty unfamiliar with C++, it was a lot of fun to read about its goals, what it does well, and even what it does not so well. In the examples presented in the paper, you get to see the elegance of generic programming and the STL. There is even an overview of exploring functional programming with C++.

File: 2007-12-17-14.org
5:14:#+TAGS: Fun, Programming

File: 2007-12-18-17.org
5:22:#+TAGS: Macros, PLT, Programming Language, Scheme
8:91:Over the years, I have heard some pretty outrageous and tantalizing claims made about the programming language Lisp. For example, “It will change you, forever.” and “You write code that writes code.”. Sadly, no further explanation is ever provided. Perhaps it is impossible to capture the essence of that to which these statements allude? This air of mystery around Lisp is both a blessing and a curse. Some folks will find this aura repugnant; others magical. For me, it was the latter. I wanted in on the secret!
14:250:To capture the fruits of my labor, both for myself and for any folks interested in the same topic, I prepared a presentation on code generation and DSLs in Scheme. The presentation itself is driven by a popular Martin Fowler article on the topic of programming language tools entitled [[http://martinfowler.com/articles/languageWorkbench.html]["Language Workbenches: The Killer-App for Domain Specific Languages?"]]. The presentation is written for folks familiar with object oriented programming, my hope being that familiar territory would ease the introduction of the topic. While *numerous* code samples in Scheme are provided both in the presentation itself and in the supplementary archive, you should feel free to skip them; they are included only for folks who wish to delve further into learning Scheme. If you would like to run them, please use [[http://download.plt-scheme.org/drscheme/][DrScheme]] v371 and set the language level to “Pretty Big”.

File: 2007-12-27-21.org
5:23:#+TAGS: Lisp, Macros, Programming Language, Ruby, Scheme
65:1:Programming with grow-able languages takes you from “power-user” to /empowered-user/!

File: 2007-12-27-22.org
5:33:#+TAGS: Conference, Functional, Programming Language
8:50:A write-up on the Commercial Users of Functional Programming 07 conference is now available [[http://cufp.galois.com/CUFP-2007-Report.pdf][here]].
10:121:It is definitely worth a read for folks who wonder about the “real world” problems that are solved using functional programming. There is a nice mix of both languages and problem domains, and the tone is pretty laid back.

File: 2008-01-08-27.org
5:9:#+TAGS: Programming Language, XO, forth

File: 2008-01-11-28.org
5:14:#+TAGS: PLT, Programming Language, Scheme, XO

File: 2008-01-18-32.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2008-01-22-33.org
5:15:#+TAGS: Java, Programming Language
12:307:His point is that Java follows the approach of providing a lot of specialized constructs rather than a few general constructs on which to build new features; so macros would not a good fit (for comparison and contrast see [[http://schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-3.html#%_chap_Temp_3]["Programming languages should be designed not by piling feature on top of feature..."]]).

File: 2008-01-31-34.org
5:42:#+TAGS: Fortress, Functional, ML, OCaml, Programming Language
8:19:How powerful is a programming language in which you do not utilize mutation? 
10:322:Apparently very powerful. So much, in fact, that [[http://en.wikipedia.org/wiki/OCaml][it]] was used to [[http://groups.google.com/group/plt-scheme/browse_thread/thread/ea3bde4976b3682d/fbbd0645a499962a?hl=en&lnk=gst&q=Fortress#fbbd0645a499962a][build the first prototype]] of the [[http://en.wikipedia.org/wiki/Fortress_programming_language][Fortress]] programming language.
12:39:Prediction for 2008, a new functional programming motto will emerge: 

File: 2008-02-05-35.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-02-09-38.org
5:15:#+TAGS: Lisp, Programming

File: 2008-02-09-37.org
5:9:#+TAGS: Programming, Programming Language
10:100:This article is a pretty fun read, especially for folks looking for fun problems to solve in their programming language of choice (or hopefully in the new language that they are currently learning). Be sure to check out the implementations that folks provided in other languages.

File: 2008-02-09-39.org
5:15:#+TAGS: Lisp, Programming

File: 2008-02-09-42.org
5:19:#+TAGS: Learning, Programming Language, Scheme

File: 2008-02-09-43.org
5:15:#+TAGS: Lisp, Programming
6:46:#+TITLE: Bubba Zanetti on "the it factor" in programming
8:541:When it comes to identifying "the it factor" in programmers, everyone has an opinion. [[http://www.paulgraham.com/bio.html][Paul Graham]] attributes it to good [[http://www.paulgraham.com/taste.html][taste]]. [[http://se.ethz.ch/~meyer/][Bertrand Meyer]] attributes it to doing things with [[http://archive.eiffel.com/eiffel/why_eiffel.html][class]]. Neither of them, though, of even come close to revealing the truth of it as Bubba Zanetti, the preeminent philosopher of the wasteland, did when he identified /style/ as "the it factor" in programming. 

File: 2008-02-09-45.org
5:26:#+TAGS: Learning, Music, Programming

File: 2008-02-09-46.org
6:32:#+TITLE: Static and Dynamic in Programming Languages
8:34:References to static and dynamic programming language features often come up on discussion boards; and are often made in an inconsistent if not confusing manner. It seems that dynamic and static refer both to name binding and type checking. I wanted a clarification; the following is my take on what I learned based on reading a [[http://www.scheme.com/tspl3/][TSPL]] along with Wikipedia articles on [[http://en.wikipedia.org/wiki/Name_binding][Name binding]] and [[http://en.wikipedia.org/wiki/Type_system][Type systems]].
10:52:Name binding refers to the abstraction provided by programming languages by which we associate a “name” in the code with an “object” in the execution environment. In statically bound languages, the binding can not change, so it can be made before the program runs. In dynamically bound languages, the binding can change or in other words is not yet known, so it can not be made before the program is executed.

File: 2008-02-09-47.org
5:9:#+TAGS: Programming Language, forth
8:41:You may or may have not heard about the programming language Forth, but if you have heard about it, you are very likely to have heard about it from some very happy, passionate Forth developers!
12:61:After reading this, it is hard not to get excited about the programming language Forth.

File: 2008-02-09-48.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-02-09-50.org
5:15:#+TAGS: .NET, Programming Language, Scheme

File: 2008-02-09-49.org
5:14:#+TAGS: PLT, Programming Language, Scheme
8:214:One of the most tantalizing features that folks hear about Scheme is the [[http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_idx_578][eval]] function. While in reality, when it comes to meta-programming most modern Scheme distributions have evolved [[http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme-Z-H-12.html#node_chap_12][other mechanisms]] to do so, eval is still a big draw. The [[http://groups.google.com/group/plt-scheme/browse_thread/thread/46c3f636f5e9afae/da8679b59995d348?hl=en&lnk=gst&q=eval#da8679b59995d348][biggest shock]] most folks have when it comes to Scheme, though, is that you can only evaluate expressions in the top level environment. If eval holds your interest long enough, for perhaps any number of different different reasons, you will eventually reach the point where you want to do use it to evaluate code that you didn't write (my inspiration came in the form of the [[http://www.object-arts.com/][Dolphin Smalltalk tutorial]] task where you write network chat clients that can send code to each other for execution). Whatever *your* inspiration was, though, you will also reach the point where you realize that you don't necessarily want arbitrary code to be executed in the environment in which you are running your program; you don't want folks sending =(exit)= for example, that can be pretty irritating. One way to work around this issue to to evaluate your code in a sandbox.

File: 2008-02-10-53.org
5:21:#+TAGS: Functional, Programming Language

File: 2008-02-09-51.org
5:9:#+TAGS: Programming Language, elisp

File: 2008-02-10-54.org
13:125:  librep is a dialect of Lisp, designed to be used both as an extension language for applications, and for use as a general programming language. It was originally written to be mostly-compatible with Emacs Lisp, but has subsequently diverged markedly. Its aim is to combine the best features of Scheme and Common Lisp and provide an environment that is comfortable for implementing both small and large scale systems. It tries to be a "pragmatic" programming language.

File: 2008-02-10-55.org
5:9:#+TAGS: Programming
8:111:[[http://www.gtk-server.org/intro.html][GTK-server]] is another way to write portable GUIs with your favorite programming language.
13:191:  The GTK-server is a free, open-source project, which offers a stream-oriented interface to the GTK libraries, enabling access to graphical user interfaces for shellscripts and interpreted programming languages using either GTK 1.x or 2.x.

File: 2008-02-10-57.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2008-02-10-56.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-02-11-59.org
5:14:#+TAGS: PLT, Programming Language, Scheme, Utility

File: 2008-02-22-61.org
5:14:#+TAGS: PLT, Programming Language, Scheme, Utility

File: 2008-02-24-64.org
5:9:#+TAGS: Programming
6:15:#+TITLE: Some Programming Articles
8:196:On his website, [[http://www.prairienet.org/~dsb/about.htm][Dan Bensen]] has got a [[http://www.prairienet.org/~dsb/artcls.htm][page set up]] with links to a whole bunch of excellent articles on programming. It wouldn't make sense for me to link to them individually. Thanks Dan!

File: 2008-02-27-66.org
5:9:#+TAGS: Programming Language, Scheme, Utility

File: 2008-03-15-67.org
5:9:#+TAGS: Programming, Teaching

File: 2008-03-17-69.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2008-03-17-68.org
5:14:#+TAGS: PLT, Programming Language, Scheme
6:22:#+TITLE: Distributed Programming in Scheme
8:47:Here are two places to start with distributed programming in Scheme:

File: 2008-03-22-71.org
5:9:#+TAGS: Programming
8:170:[[http://list.cs.brown.edu/pipermail/plt-scheme/2008-March/023421.html][This post]] on the PLT discussion list reminded me of me. There was a point where my interest in programming languages was more about /what/ you could do with a language, without much of an emphasis on the /why/ you would want to do such a thing. While you can do a lot of interesting things in different languages, there is often more value when there is reason, or vision, of why you would do those things. From my perspective, most languages have, at one time or another had some guiding vision or force behind them.
10:162:Eiffel has Bertrand Meyer saying "Everything is an object, and be static about it" and C++ has Bjarne Stroustrup saying "Keep it fast, keep it generic", Scheme "Programming languages should be designed not by piling feature ...". Ruby has Yukihiro Matsumoto saying "It makes sense to me, if you don't like it, see you later!". Consequently there are a lot of really "neat" things you can do in Ruby, but it is not always obvious to me why you might want to do those things (I'm excluding the /obvious/ ones so give me a break on those). Mats knows, and if you don't "get it" oh well! The vision, or reason, extends all the way from the macrocosm of the entire language to the microcosm of its individual features.
12:1:Programming language features are there for a reason. While I will always find individual features interesting in terms of what you can do, one of my goals as a programmer is to always study with enough discipline to understand why such features exist. 

File: 2008-03-17-70.org
5:17:#+TAGS: Eiffel, Programming Language
8:224:If you are going to utilize the [[http://en.wikipedia.org/wiki/Object_oriented][Object Oriented]] paradigm for implementing your system, you ought to do yourself a favor and learn the [[http://en.wikipedia.org/wiki/Eiffel_(programming_language)][Eiffel]] programming language. Why?
12:51:Read about [[http://en.wikipedia.org/wiki/Eiffel_(programming_language)#Conversions][type conversion]], for example. What a wonderful language feature. You can even use tuples!

File: 2008-03-23-73.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-03-23-72.org
5:32:#+TAGS: Lisp, Object Oriented, Programming Language, Scheme
8:105:At one time or another you have probably heard the claim made that since you can utilize closures while programming in Lisp, there is no need to utilize an object system. That claim is sort of a half-truth. While closures are the language construct that allow you to create objects, they certainly don't provide you with all of the object oriented programming language features that you would expect. Instead, you need to implement those features yourself. 

File: 2008-03-23-74.org
5:15:#+TAGS: Lisp, Programming Language

File: 2008-03-23-75.org
5:14:#+TAGS: Art, Programming, compiler, interpreter, virtual machine
10:55:Joking aside, once you get up to speed on stack based programming, this looks like a fun interpreter project. I am supposing that there are some very interesting opportunities on how to literally make your code "more beautiful"!

File: 2008-03-23-76.org
5:20:#+TAGS: JVM, Lisp, Programming Language
8:218:[[http://clojure.sourceforge.net/][Clojure]] is a Lisp like language built especially to run on the JVM. After perusing the language rationale and features, it is pretty clear that anyone interested in multi-paradigm programming on the JVM would have a great time digging deeper in to Clojure!

File: 2008-03-23-78.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-03-23-80.org
5:15:#+TAGS: Lisp, Programming
8:101:The last time I spoke to a friend of mine who knows both Scheme and Common Lisp (among /many/ other programming languages), his current language of choice was Python. More or less, he said that it just "feels right" (I need to pick his brain more on this). 

File: 2008-03-23-79.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-03-23-82.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-03-26-83.org
5:19:#+TAGS: Learning, Programming Language, Scheme

File: 2008-03-29-86.org
10:62:([[http://jfm3-repl.blogspot.com/2008/03/crucial-reading-for-programming.html][thanks jfm]])

File: 2008-03-31-89.org
5:17:#+TAGS: Macros, Programming Language
6:47:#+TITLE: Companies using DSLs with Functional Programming Languages

File: 2008-03-30-87.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-03-31-88.org
5:19:#+TAGS: .NET, F#, Programming Language
8:109:[[http://www.intellifactory.com/][IntelliFactory]] is a company that facilitates the adoption of functional programming, in particular, F#.

File: 2008-04-02-91.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-04-07-93.org
5:18:#+TAGS: Haskell, Programming Language

File: 2008-04-10-94.org
5:9:#+TAGS: Programming Language, elisp

File: 2008-04-18-96.org
5:9:#+TAGS: Programming Language, elisp

File: 2008-04-19-100.org
5:25:#+TAGS: Assembly, Lisp, Programming, Teaching

File: 2008-04-19-99.org
5:30:#+TAGS: .NET, C Sharp, Lisp, Programming Language

File: 2008-04-20-104.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Ruby

File: 2008-04-19-98.org
5:23:#+TAGS: Design, Lisp, Programming Language, Scheme
8:101:[[http://www.r6rs.org/][R6RS]] is the new language specification for Scheme. The goal is to provide programming features that folks need for programming "in the large". 

File: 2008-04-20-103.org
8:42:When you first start studying functional programming, one of the things that people will ask you is "So; have you learned lambda calculus (TLC)?". 
10:78:The fact is that while you don't need to learn TLC to learn about functional programming; you /ought/ too study the TLC at some point.
12:110:In [[http://lambda-the-ultimate.org/node/492][this great LtU thread]] on "where to get started with studying programming language theory", Anton van Straaten [[http://lambda-the-ultimate.org/node/492#comment-36585][posted a comment]] referencing two posts on the PLT discussion list detailing [[http://list.cs.brown.edu/pipermail/plt-scheme/2007-August/020296.html][a plan]] on what you should study when it comes to TLC and [[http://list.cs.brown.edu/pipermail/plt-scheme/2007-August/020302.html][the texts]] that you should use to facilitate those studies.

File: 2008-04-20-101.org
5:21:#+TAGS: Functional, Programming Language, Scheme

File: 2008-04-20-102.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Scheme

File: 2008-04-20-105.org
5:15:#+TAGS: Lisp, Programming, philosophy
6:38:#+TITLE: How do you find the perfect programming language?
8:40:For many years I sought “the perfect programming language”. Traveling aim-fully from language to language, I found that there are a number of aspects to enjoy when it comes to a particular programming language, but I never found one that was “just right”. 
12:51:Eventually I realized that there is no “perfect programming language”. Perhaps, though, there is a language that is “good enough”. 
14:25:A lot of folks love the programming language Lisp. It provides all of the core language features you could ever need. On top of that, it lets you tailor the syntax to your pleasure. 
16:72:From what I know about Lisp, it is “good enough”, and in the world programming languages, that is probably just about the best compliment you could give /any/ language.

File: 2008-04-20-106.org
5:33:#+TAGS: Conference, Functional, Programming Language
6:37:#+TITLE: Functional and Declarative Programming in Education (FDPE08) 
8:136:[[http://www-ps.informatik.uni-kiel.de/fdpe08/][This conference]] covers a lot of very interesting topics about the role of functional programming (FP) languages in education (follow the link for ample details). It sounds like a great conference!

File: 2008-04-21-109.org
5:9:#+TAGS: Programming Language, elisp

File: 2008-04-20-108.org
5:19:#+TAGS: Fortress, Programming Language
8:21:Guy Steele's latest programming language [[http://projectfortress.sun.com/Projects/Community][Fortress]] [[http://permalink.gmane.org/gmane.comp.lang.fortress.general/180][has been released]].
13:16:  The Fortress programming language is a general-purpose, statically typed, component-based programming language designed for producing robust high-performance software with high programmability.

File: 2008-04-21-110.org
5:9:#+TAGS: Programming Language, forth

File: 2008-04-21-111.org
5:9:#+TAGS: Programming Language, elisp

File: 2008-04-21-112.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-04-21-113.org
5:21:#+TAGS: Emacs, Ide, Programming Language, elisp

File: 2008-04-21-115.org
5:19:#+TAGS: Learning, Programming Language, Scheme
6:48:#+TITLE: How to Learn Scheme (was How to Learn Programming)
8:47:1. [[http://www.scheme.com/tspl3/][The Scheme Programming Language]] Third Edition by R. Kent Dybvig
16:35:The difference between learning a programming language and learning how to program is now clear enough to me that I had to revise this post to clarify its intent and correct its content. As such, the title has been changed, and only one book has been recommended.

File: 2008-04-21-114.org
5:19:#+TAGS: Learning, Programming, SICP

File: 2008-04-22-116.org
5:19:#+TAGS: Learning, Programming, SICP
10:65:Eli is an inspiration to, and fine example for, all students of programming.

File: 2008-04-23-119.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-04-22-117.org
5:19:#+TAGS: Learning, Programming, SICP

File: 2008-04-24-122.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-04-27-123.org
5:9:#+TAGS: Programming Language, Scheme
8:60:[[http://www.r6rs.org/][R6RS]] is an experiment to address programming language features that people need "in the large". The keyword in there is "experiment".

File: 2008-04-27-124.org
5:9:#+TAGS: Programming Language, Scheme
13:48:is about anything even remotely related to the programming language Scheme

File: 2008-04-27-125.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-04-27-126.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-04-27-128.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-04-27-129.org
5:9:#+TAGS: Programming Language, Scheme
13:51:is a small-footprint implementation of the Scheme programming language that is provided with some database, unix programming and cgi scripting extensions.

File: 2008-04-27-130.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-04-27-131.org
5:23:#+TAGS: Erlang, Lisp, Programming Language

File: 2008-04-27-132.org
5:24:#+TAGS: Haskell, Lisp, Programming Language
12:171:  is a new syntax frontend for Haskell. Next to its syntax in the form of symbolic expressions --- which is also known as Lisp --- Liskell also features an extended meta-programming facility. Its aim is to get the best of both worlds: being pure and functional with type inference in the tradition of Haskell, while providing the simplicity and uniformity in its syntax that is necessary for meta-programming.

File: 2008-04-27-133.org
16:9:In most programming languages, it is the parsers responsibility to transform the syntax (how the code looks to you) into a parse-tree (how the code looks to the compiler). This is by design. 
18:45:Syntax for humans is what matters most in a programming language, and it is why we all fall in love with different languages. We get a syntax we love, and so does the compiler. The parser is the translator between the two worlds. Take this example in Java.

File: 2008-04-28-135.org
5:15:#+TAGS: Lisp, Programming Language

File: 2008-04-28-136.org
5:15:#+TAGS: Lisp, Programming, philosophy
10:117:If you pursue the "Road to Lisp", it will serve as an elucidative experience as to whether or not you are "good" at programming. You see, I used to confuse "doing" with "learning". All the "greats" tell you to learn a new language each year, but they don't really tell you why, just that something good will happen. Now I can tell you from experience that I have had great fun and learned a lot jumping from language to language, but that strategy for learning is poor use of time and you'll probably just end up being an average programmer in more languages after it is all said and done. There are better, much better ways to study the fundamentals of programming. 

File: 2008-04-27-134.org
5:23:#+TAGS: Lisp, Macros, Programming Language, Scheme

File: 2008-04-28-138.org
5:9:#+TAGS: Programming, philosophy

File: 2008-04-30-139.org
5:14:#+TAGS: PLT, Programming Language, Scheme
18:84:Your ultimate goal in using the key-bindings should be to facilitate your style of programming. I've got my preferred approach, of course, and for that I've attached my [[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2008/04/drschemekeysonly.txt][favorite key-bindings]]. In lieu of pasting all of those into this post, I've included my “Top 5 List” of DrScheme key-bindings that should get you going in the right direction (use the big list as a reference for these):

File: 2008-05-01-142.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-01-144.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2008-05-01-143.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-01-145.org
5:9:#+TAGS: Programming

File: 2008-05-03-146.org
5:16:#+TAGS: COBOL, Programming

File: 2008-05-03-147.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-03-148.org
5:37:#+TAGS: Conference, Latently Typed, Programming Language

File: 2008-05-03-149.org
5:25:#+TAGS: Latently Typed, Programming Language, Smalltalk

File: 2008-05-03-150.org
5:25:#+TAGS: Idea, Learning, Programming
8:85:[[http://esoteric.voxelperfect.net/wiki/Brainfuck][Brainf***]] is a Turing complete programming language, known for its esoteric "minimalist nature", that has gained quite a bit of popularity over the years. 

File: 2008-05-03-152.org
5:19:#+TAGS: Learning, Programming, Teaching

File: 2008-05-03-151.org
5:15:#+TAGS: Lisp, Programming Language, Scheme, Teaching

File: 2008-05-03-154.org
5:15:#+TAGS: Lisp, Programming Language, Scheme, philosophy
12:233:Since Scheme and Common Lisp are both Lisp dialects, in some ways they are very similar; but in other ways they are quite different. The thing is that every language decision is a trade off from which we can learn. Most students of programming would look to both the similarities /and/ differences in each language and recognize their function and beauty! 

File: 2008-05-03-157.org
5:33:#+TAGS: Conference, Functional, Programming Language

File: 2008-05-03-155.org
5:23:#+TAGS: Lisp, Macros, Programming Language, Scheme

File: 2008-05-03-156.org
5:21:#+TAGS: Conference, Programming Language, Scheme
6:49:#+TITLE: 2008 Workshop on Scheme and Functional Programming
8:104:The goal of the [[http://www.ccs.neu.edu/home/will/scheme2008/][2008 Workshop on Scheme and Functional Programming]] is to:
13:30:  report experience with the programming languages known as Scheme, to discuss ideas for the future of Scheme, and to present research related to Scheme and functional programming.

File: 2008-05-03-158.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-05-03-162.org
5:21:#+TAGS: Emacs, Ide, Programming Language, elisp

File: 2008-05-03-161.org
5:21:#+TAGS: Emacs, Ide, Programming Language, elisp

File: 2008-05-03-165.org
5:9:#+TAGS: Programming
8:59:[[http://wagerlabs.com/][Tenerife Skunkworks]] is a great programming blog run by Joel.

File: 2008-05-03-166.org
5:9:#+TAGS: Programming

File: 2008-05-03-170.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-05-03-171.org
5:19:#+TAGS: Learning, Programming
6:14:#+TITLE: Toy programming tasks are sweet
8:52:[[http://jfkbits.blogspot.com/2008/05/little-lisps-programming-candy-or.html][Here]] is a good article about the role and value of "toy" programming tasks.

File: 2008-05-05-173.org
8:21:Here is the classic programming "how do you shoot yourself in the foot" joke, brought to Lisp by someone who "gets it"!

File: 2008-05-05-174.org
5:9:#+TAGS: Programming, philosophy

File: 2008-05-13-175.org
5:9:#+TAGS: Programming Language, Shell

File: 2008-05-13-177.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-13-176.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-14-179.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2008-05-19-181.org
5:9:#+TAGS: Programming, philosophy
6:42:#+TITLE: Post Java One 08 Reflections on Programming Philosophy

File: 2008-05-19-180.org
5:19:#+TAGS: Fortress, Programming Language
6:38:#+TITLE: Fortress: A Next-Generation Programming Language Brought to You by Sun Labs
8:30:"Fortress: A Next-Generation Programming Language Brought to You by Sun Labs" is the first session I attended at Java One 08. Being that this is my first time at Java One, I was pretty excited to see how both this session, and, the entire conference, would pan out. 

File: 2008-05-19-182.org
5:15:#+TAGS: Java, Programming Language
12:87:The really interesting stuff in Java land right now is Java 7 features and concurrent programming with Java, but apparently none of that was worth mentioning.

File: 2008-05-19-183.org
5:15:#+TAGS: Java, Programming Language

File: 2008-05-19-184.org
5:15:#+TAGS: Java, Programming Language

File: 2008-05-19-185.org
5:9:#+TAGS: Programming Language, dtrace
10:100:[[http://www.sun.com/bigadmin/content/dtrace/][dtrace]] is a no-overhead, highly dynamic, powerful programming language used to report on running systems. It runs on Solaris, FreeBSD, Mac OS X, and sorely neither Linux nor AIX (the two latter camps will roll their own clones on this one). 

File: 2008-05-19-186.org
5:9:#+TAGS: Programming Language, Scala
6:10:#+TITLE: Programming with Functional Objects in Scala
8:33:At the JavaOne 08 presentation "Programming with Functional Objects in Scala", [[http://www.scala-lang.org/][Scala]]'s creator [[http://lampwww.epfl.ch/~odersky/][Martin Odersky]] summed up Scala's mission statement for the audience:
13:71:  Scala is the perfect mixture of Object Oriented (OO) and Functional Programming (FP). You get the flexibility of FP along with the familiarity of OO; along with the awesome power of the Actor model. Combine that will full speed execution on the JVM (in contrast to JRuby for example) along with seamless integration with existing Java libraries and you've got a platform that is tough to beat".

File: 2008-05-19-188.org
5:9:#+TAGS: Programming, philosophy
18:284:Whether or not you agree in the validity of memes as a science (I don't); the term is often used in authoratively in pop culture. They typically represent some bit information, usually in the form of a frequently repeated phrase, that spreads around and around the community. In the programming community, there are plenty. For example, here are a few: "convention over configuration", "don't write code just to make the compiler happy", or "every developer must learn how to program concurrently: it is the future".
27:9:-  "[My programming language] is /purely functional/": For the type of program I am writing, side-effects are not welcome
37:169:-  The IEEE, ACM, and nearly every presenter at JavaOne 08 preached fear of the multicore future without expounding on /why/ every developer needs to master multi-core programming (solution looking for a problem?). That said: if /every/ programmer learned how to program really well in the first place, we might not need 64 cores.

File: 2008-05-22-190.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-22-193.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-28-194.org
5:9:#+TAGS: Programming Language, Scheme, Teaching
6:11:#+TITLE:  Programming the Sony AIBO in Scheme
8:136:[[http://list.cs.brown.edu/pipermail/plt-scheme/2008-May/024783.html][This post]] on the PLT discussion list shares some research into programming the Sony AIBO with Scheme, with [[http://list.cs.brown.edu/pipermail/plt-scheme/2008-May/024784.html][this followup post]] providing additional details on a Scheme interpreter ([[http://kaolin.unice.fr/STk/][STk]]) that provides a foreign function interface for the Sony AIBO C++ API.

File: 2008-05-28-195.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-05-30-199.org
5:14:#+TAGS: PLT, Programming Language, Scheme, XO

File: 2008-06-07-201.org
5:20:#+TAGS: Lisp, PLT, Programming Language, Scheme

File: 2008-06-08-203.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-08-205.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-08-206.org
5:9:#+TAGS: Programming, philosophy
8:163:If you were [[http://www.findinglisp.com/blog/2008/06/timeless-desert-island-language.html][trapped on a desert island]], clearly you would choose C as your only programming language!

File: 2008-06-08-207.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-06-16-210.org
5:31:#+TAGS: Functional, Learning, Programming, Programming Language, Teaching
6:21:#+TITLE: Functional Programming in Education
9:49:  On May 28-29, 2008 SIGPLan held a workshop on Programming Languages in the Curriculum at Harvard.
14:35:to discuss the role of Functional Programming in Education. The results of their efforts are [[http://wiki.acm.org/cs2001/index.php?title=SIGPLAN_Proposal][here]].
16:172:Please have a look, and, per [[http://list.cs.brown.edu/pipermail/plt-scheme/2008-June/024987.html][Matthias' comment]], please consider posting your comments (under the "Programming Languages" section)!

File: 2008-06-16-211.org
5:31:#+TAGS: Functional, Learning, Programming, Programming Language, Teaching
6:24:#+TITLE: On Functional Programming in Education
8:67:Regarding my [[http://www.wisdomandwonder.com/link/210/functional-programming-in-education][last post]], you should definitely read all of the comments. It is pretty interesting to get everyone's perspective on the topic (even if it is simply something to the effect of "Sounds like a great idea!"). Take, for example, [[http://www.cs.indiana.edu/~dfried/][Dan Friedman]]'s comment:
13:41:  Since I have been teaching functional programming in my undergraduate programming languages course since 1967, I am thrilled that at long last I might be teaching the sanctioned material.

File: 2008-06-16-212.org
5:19:#+TAGS: Learning, Programming, philosophy

File: 2008-06-16-213.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-16-214.org
5:33:#+TAGS: Conference, Functional, Programming Language

File: 2008-06-19-209.org
5:9:#+TAGS: Programming, philosophy

File: 2008-06-24-220.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-24-221.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-24-227.org
6:31:#+TITLE: Updated: Distributed Programming in Scheme
8:58:See [[http://www.wisdomandwonder.com/link/68/distributed-programming-in-scheme][here]]

File: 2008-06-24-231.org
5:9:#+TAGS: Programming Language, Scheme
9:82:  [[http://code.google.com/p/ypsilon/][ypsilon]] is the implementation of Scheme Programming Language, which conforms to the latest standard R6RS. It achieves a remarkably short GC pause time and the best performance in parallel execution as it implements "mostly concurrent garbage collection", which is optimized for the multi-core CPU system.

File: 2008-06-24-232.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-06-26-235.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-25-233.org
5:33:#+TAGS: Conference, Functional, Programming
6:68:#+TITLE:  DEFUN08: ACM SIGPLAN 2008 Developer Tracks on Functional Programming 
13:37:We want to know about your favorite programming techniques, powerful
16:32:be productive using functional programming, write better code, and

File: 2008-06-26-236.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy

File: 2008-06-28-239.org
5:9:#+TAGS: Programming Language, forth

File: 2008-06-28-238.org
5:9:#+TAGS: Programming, philosophy

File: 2008-06-28-241.org
6:32:#+TITLE: Updated: How to Learn Programming
8:63:See [[http://www.wisdomandwonder.com/article/115/how-to-learn-programming][here]]

File: 2008-06-28-242.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-06-28-243.org
5:9:#+TAGS: Programming Language, forth

File: 2008-06-28-249.org
5:14:#+TAGS: PLT, Programming Language, Scheme
15:50:  Teaching languages are small subsets of a full programming language. While such restrictions simplify error diagnosis and the construction of tools, they also make it impossible (or at least difficult) to write some interesting programs. To circumvent this restriction, it is possible to import teachpacks into programs written in a teaching language.

File: 2008-07-03-254.org
9:205:  A silent revolution has changed the way computer science is understood and taught. The modern curriculum no longer focuses on the constructs of a language and the state changes in the machine. Instead, programming is taught as a problem-solving process that starts from a thorough understanding of classes of data and objects. The [[http://www.teach-scheme.org/][TeachScheme! Project]] has been at the vanguard of this revolution; the new series is its natural extension to cover a seamless transition to object-oriented design using Java.
19:31:  wants to turn Computing and Programming into an indispensable part of the liberal arts curriculum.

File: 2008-07-03-252.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2008-07-03-253.org
5:15:#+TAGS: Lisp, Programming Language

File: 2008-07-10-257.org
5:22:#+TAGS: Erlang, PLT, Programming Language, Scheme

File: 2008-07-13-261.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-07-13-262.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-07-13-263.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-07-14-266.org
5:9:#+TAGS: Programming Language, Ruby

File: 2008-07-20-270.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-07-20-271.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-07-23-273.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-07-22-272.org
5:9:#+TAGS: Programming Language, Scheme
9:113:  [[http://www.ccs.neu.edu/home/will/Larceny/][Larceny]] is a simple and efficient implementation of the Scheme programming language. Created originally as a test vehicle for research on garbage collection and compiler optimizations, Larceny has grown into a major multiplatform system, and is currently the only implementation that supports all four de facto standards for Scheme: IEEE/ANSI, R5RS, ERR5RS, and the R6RS.

File: 2008-07-24-276.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-07-28-277.org
5:9:#+TAGS: Programming, Programming Language, mathematics

File: 2008-08-01-278.org
5:9:#+TAGS: Programming

File: 2008-08-02-280.org
8:96:From [[http://arstechnica.com/news.ars/post/20080729-little-b-project-creates-biology-specific-programming-system.html][Ars]]:

File: 2008-08-02-282.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-02-283.org
5:9:#+TAGS: Programming

File: 2008-08-02-285.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-02-287.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-02-286.org
5:14:#+TAGS: PLT, Programming Language, Scheme
8:53:If you ever feel like you want to take a break from programming and play some games, PLT Scheme [[http://download.plt-scheme.org/doc/4.0.1/html/games/index.html][comes with some games for you]]!

File: 2008-08-02-292.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-02-301.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-06-321.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-06-328.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-07-352.org
5:15:#+TAGS: Lisp, Programming, Programming Language, philosophy

File: 2008-08-07-251.org
6:10:#+TITLE: Programming in Education: OLPC Case Studies

File: 2008-08-07-365.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy

File: 2008-08-07-387.org
5:37:#+TAGS: Computer Science, Learning, Programming, Teaching

File: 2008-08-07-374.org
5:19:#+TAGS: Learning, Programming, philosophy
8:107:Over the past year or two, I've put a sincere effort in to, to put it simply, "learning new things" about programming. It has been a lot of fun, and it has taken some sincere effort. In the process, something interesting happened; I was forced to deal with flaws in how I study and learn. 
12:43:The first was studying Scheme, Functional Programming, giving presentations on programming, hanging around with guys in town to talk about programming, and biggest of all, joining the [[http://www.plt-scheme.org/maillist/][PLT Discussion List]]. Often times, programmers quip that they "want to work with a group of people who are all smarter than them". The likelihood of that happening is slim. While I'm not sure why, I just see that it doesn't happen all that often. One might wonder where that could happen, and, one place is in a discussion list. 

File: 2008-08-07-390.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-10-413.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-10-422.org
5:9:#+TAGS: Programming

File: 2008-08-11-427.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-11-432.org
5:15:#+TAGS: Lisp, Programming, philosophy

File: 2008-08-11-440.org
5:25:#+TAGS: HTDP, Learning, Programming, Teaching, philosophy
10:148:Matthias Felleisen talks [[http://www.ccs.neu.edu/home/matthias/Presentations/ccsne.html][here]] about his teams approach to first-year courses on programming and computing.

File: 2008-08-11-449.org
5:9:#+TAGS: Programming

File: 2008-08-13-464.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-16-475.org
5:19:#+TAGS: Learning, Programming Language, Scheme, Teaching

File: 2008-08-16-487.org
5:19:#+TAGS: Learning, Programming, Programming Language, Scheme, Teaching, philosophy
8:100:[[http://en.wikipedia.org/wiki/Lambda_Papers][The Lambda Papers]] are a series of seminal works on programming language design and implementation written by [[http://en.wikipedia.org/wiki/Guy_Steele_Jr.][Guy Steele]] and [[http://en.wikipedia.org/wiki/Gerald_Jay_Sussman][Gerry Sussman]].
10:213:You may have heard about them because of the very popular [[http://lambda-the-ultimate.org/][Lambda the Ultimate]] website, or maybe you just heard about them because you are studying Scheme, or are a student of programming history. Whatever the case, they are very much worth reading (you'll have to trust me on that).

File: 2008-08-16-497.org
5:19:#+TAGS: Learning, Programming, Programming Language, Scheme, Teaching, philosophy
15:6:Most programming language constructs can be modeled in terms of lambda, letrec, and if. This might seem pretty radical to folks used to so called "big languages" today. It also might offer some insight into the "minimalistic" nature of Scheme.
30:135:Be sure to read the conclusion. It contains numerous gems (both overt and covert) about the role of language, the programmer, and the programming language designer.

File: 2008-08-17-509.org
5:19:#+TAGS: Learning, Programming, Programming Language, Scheme, Teaching, philosophy
14:9:-  Must programming language designers admit that they can't possibly get it right for every programmer? Yes. Failure to do so results in programmers using the wrong structures to solve their problems.
15:41:-  There is a marked difference between programming language concepts and language constructs.
20:37:-  The difficulties in dealing with programming and programming languages stem from the fact that no distinction is made between the abstraction of program organization and the concrete embodiment of those notations as programming language constructs.
21:14:-  For every programming concept found to be useful, there ought to be more than one programming language construct to embody that concept. Philosophically, a marked difference from Python's "my way or the highway" approach today.
22:71:-  The features of tail-recursion allow for a new mental approach for programming.
24:178:-  A language should be so designed that one is encouraged to use a construct if, and only if, it is appropriate; it must also provide enough constructs to cover all reasonable programming constructs.
25:66:-  Regarding GOTO, they tried to eliminate unwanted concepts and programming styles by banning a construct.

File: 2008-08-17-571.org
5:9:#+TAGS: Programming Language, Scheme
9:80:  [[http://sam.zoy.org/elk/][Elk [Scheme]]] is an implementation of the Scheme programming language. In contrast to existing, stand-alone Scheme systems Elk has been designed specifically as an embeddable, reusable extension language subsystem for applications written in C or C++.

File: 2008-08-17-574.org
5:9:#+TAGS: Programming
14:20:Anyone looking for programming fodder might have fun applying their current language of study to Netflix's [[http://www.netflixprize.com/faq][problem]] and massive data set!

File: 2008-08-17-527.org
5:21:#+TAGS: Functional, Programming Language, Scheme
8:44:When I was first learning about Functional Programming and Scheme, the idea that order-of-execution didn't matter in purely functional programs, was "strange to me", to put it nicely. When I first read about Scheme's [[http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_idx_420][begin]] form, for example, I remember feeling satisfied that Scheme wasn't totally insane as it had at least some way to force imperative execution (the fact that, at the time, I never considered how such a feature may be implemented using Scheme's core constructs, I now consider to be both a 'missed opportunity' and 'study flaw', then again you could also call it 'learning'). Nonetheless, much, much later, while reading [[http://library.readscheme.org/page1.html][LAMBDA: The Ultimate Imperative]], I came upon page 5 on which the question of how we may model imperative constructs in languages based on lambda calculus (like Scheme, for example) was raised.
141:254:Without it, all you've got to go on is that "things happen this way" either because "that is the way the language designer wanted it" or that "computers execute instructions in order, so it has got to be this way". Neither help you to better understand programming or computation, and the latter, in particular, is not true when you're wearing your programmer hat.

File: 2008-08-17-578.org
5:9:#+TAGS: Programming

File: 2008-08-17-581.org
5:15:#+TAGS: Lisp, Programming

File: 2008-08-17-588.org
5:9:#+TAGS: Programming Language, Scheme
9:215:  [[http://citeseerx.ist.psu.edu/viewdoc/summary;jsessionid=9358F23E06B535DDD5BA2AAC80190D3E?doi=10.1.1.102.2907][MPSCM]] is an extension to the MzScheme dialect of Scheme that provides facil-ities for distributed programming with a message passing base and higher-level distributing constructs designed in a more functional style. This paper provides a description of the MPSCM environment and an analysis of the results in terms of performance, expressivity, and usability.

File: 2008-08-22-602.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-08-22-605.org
5:9:#+TAGS: Programming

File: 2008-08-22-609.org
5:9:#+TAGS: Programming

File: 2008-08-22-615.org
5:9:#+TAGS: Programming

File: 2008-08-22-623.org
5:19:#+TAGS: Learning, Programming, Programming Language, Scheme, Teaching
13:137:  As some of you know, we have been working on a new way of writing interactive applications, such as games, using just pure functional programming. We call this the World style, and it is embodied in the world.ss Teachpack included in the DrScheme distribution.
15:76:In response to demand, we are creating extended materials on this style of programming:
24:159:Some folks might find HTDW a little more interesting in that it is [[http://list.cs.brown.edu/pipermail/plt-scheme/2008-August/026445.html][purely functional programming]].

File: 2008-08-22-618.org
5:19:#+TAGS: Learning, Programming, Scheme, Teaching
6:19:#+TITLE: Teaching Programming Languages in a Post-Linnaean Age
9:3:  Programming language ``paradigms'' are a moribund and tedious legacy of a bygone age. Modern language designers pay them no respect, so why do our courses slavishly adhere to them? [[http://www.cs.brown.edu/~sk/Publications/Papers/Published/sk-teach-pl-post-linnaean/][This paper]] argues that we should abandon this method of teaching languages, offers an alternative, reconciles an important split in programming language education, and describes a textbook that explores these matters.

File: 2008-08-24-634.org
14:13:Do you love programming?
16:47:Does the famous Alan Perlis quip that “[Any programming language] that doesn't affect the way you think about programming, is not worth knowing.” give you a rush?
24:108:[[http://www.htdp.org/][\_How\_to\_Design\_Programs\_ (HTDP)]] is a book about learning how to think about programming. I've no doubt that most of us, my friends and peers, already know how to program, and in fact, are excellent at it. But how did we get here? More importantly, how would we teach others to get there? (Is the unexamined life worth living?)

File: 2008-08-24-645.org
10:84:I'm pretty excited to see how this turns out. I hope not only to learn a lot about programming, but also about learning with other folks, especially with this distributed/online model.

File: 2008-08-26-649.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-09-01-655.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-08-27-652.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2008-09-01-672.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-09-03-676.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-09-05-682.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-09-08-689.org
5:9:#+TAGS: Programming

File: 2008-09-08-692.org
5:18:#+TAGS: Clojure, Programming Language

File: 2008-09-10-699.org
5:9:#+TAGS: Programming, philosophy
8:146:For my [[http://barcampmadison2.org/][BarCampMadison2]] presentation this year, I prepared a DVD "gift bag" with a lot of material on Functional Programming (FP) and specific FP languages like Scheme and Haskell, and also included [[http://plt-scheme.org/][DrScheme]] binaries for Mac and Windows and source for UNIX. 

File: 2008-09-13-725.org
24:180:The tagging facilities that most blog engines provide today allow you to 'tag' your posts. I recommend you tag them with 'Study-HTDP', which is more specific than just 'HTDP' or 'Programming' alone.

File: 2008-09-13-734.org
10:139:A. No. As a result of working through the book, we /will/ learn Scheme, but the goal is to learn how write programs, not learn Scheme the programming language. For that you should read [[http://www.scheme.com/tspl3/]].

File: 2008-09-13-745.org
22:20:This isn't a learn programming in 21 days scam, fluff book on the latest fad language, or the extended sermon of someone who makes his money by talking and not doing much else.
30:66:Based on what I've seen so far, we are all learning a lot about: programming, communication, and culture. It is true, it /is/ an experiment; the notion of good and bad are less important here, *everything* we are learning, painful or pleasant, is very valuable.

File: 2008-09-13-762.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-09-16-775.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-09-20-780.org
5:14:#+TAGS: PLT, Programming Language, Scheme
13:48:  Abstraction is the cornerstone of high-level programming; HTML forms are the principal medium of web interaction. However, most web programming environments do not support abstraction of form com- ponents, leading to a lack of compositionality. Using a semantics based on idioms, we show how to support compositional form construction and give a convenient syntax.

File: 2008-09-24-812.org
5:14:#+TAGS: PLT, Programming, Programming Language, Scheme

File: 2008-09-24-815.org
5:33:#+TAGS: Conference, Functional, Programming Language
6:18:#+TITLE: ICFP 08 programming contest results presentation
8:18:The ICFP +09+ 08 programming contest results presentation is [[http://video.google.com/videoplay?docid=-4697764813432201693][here]] on video.

File: 2008-10-04-824.org
5:9:#+TAGS: Programming Language, Scheme
9:126:  [[http://hop.inria.fr/][HOP]] is a new Software Development Kit for the Web 2.0. It relies a new higher-order language for programming interactive web applications such as multimedia applications (web galleries, music players, ...), office applications (web agendas, mail clients, ...), ubiquitous domotics, etc. HOP can be viewed as a replacement for traditional graphical toolkits. HOP is implemented as a Web broker, i.e., a Web server that may act indifferently as a regular Web server or Web proxy.

File: 2008-10-04-818.org
5:21:#+TAGS: Functional, Programming Language
6:40:#+TITLE: Commercial Uses of Functional Programming
9:119:  [[http://journals.cambridge.org/action/displaySpecialPage?pageId=856][Commercial Use articles]] focus on functional programming "as a means, not an end". As such, we solicit papers about experiences using functional languages in commercial and open source settings. The purpose of a Commercial Use article is to document and assess cases where functional programming was used in a real world setting. We are interested not only in successes, but also in failures. Articles should distill experiences using functional languages so that others can learn from those experiences, whether the lessons learned be technical, organizational, or about the narratives used to make the case to management.

File: 2008-10-04-821.org
5:14:#+TAGS: JVM, Programming Language

File: 2008-10-05-830.org
5:14:#+TAGS: Fun, Programming Language, Scheme

File: 2008-10-05-836.org
5:9:#+TAGS: Programming Language, Scheme
16:36:-  [[http://www.dmoz.org/Computers/Programming/Languages/Lisp/Scheme/Implementations/][DMOZ]]

File: 2008-10-05-833.org
5:9:#+TAGS: Programming Language, Scheme
6:21:#+TITLE: The Scheme Programming Language Standardization Experience

File: 2008-10-05-839.org
5:19:#+TAGS: Learning, Programming, Scheme, Teaching
9:456:  Students who know procedural and object-oriented languages frequently have difficulty learning the functional paradigm. The purpose of this work is to facilitate this transition by designing and implementing a set of visual tools that help students understand how Scheme, a functional language, programs work. To achieve our goals we worked on the implementation of a Scheme interpreter and a set of visual tools for different key aspects of functional programming languages. [[http://www.davidpilo.com/pvts/][Pilo Visualization Tools for Scheme (PVTS)]] emphasizes on the functional programming language paradigm and its visual representations. PVTS can be used by teachers as a teaching tool as well as by students as a learning tool.

File: 2008-10-06-847.org
5:9:#+TAGS: Programming Language, Scheme
13:198:  A Scheme interpretter written in Java that uses some compiler-style optimizations for better performance than straightforward interpretters. Originally started in 1996 as a project to learn Java programming, BDC Scheme was used as an extension language in a commercial product starting in 1997. Previous to open source release in 2002 it was written up as part of an a MIT MEng thesis in 2000 where it was referred to as Script. The thesis covers the history of the implementation and benchmarks the performance relative to a variety of other Scheme implementations, both Java and non-Java based such as Kawa, Silk, Skij, Scheme 48, MIT Scheme. Both Sun and IBM Java virtual machines are used in the comparison.

File: 2008-10-06-851.org
5:9:#+TAGS: Programming Language, Scheme
11:167:Snow is a general framework for developing and distributing portable Scheme packages. Snow comes with a set of core packages that provide portable APIs for practical programming features such as networking, cryptography, data compression, file system access, etc. Snow packages can export procedures, macros and records.

File: 2008-10-06-854.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-10-06-857.org
5:9:#+TAGS: Programming Language, Scheme
9:91:  [[http://www.mazama.net/scheme/pscheme.htm][Pocket Scheme]] gives your PDA a standalone programming capability in Scheme, a dialect of Lisp with exceptionally clear and simple semantics. It supports file creation and manipulation, arithmetic operations of unlimited precision, the complete Unicode character set, data sharing via the Windows clipboard, regular expression matching on character strings, simple TCP client and server networking, scripts written in Scheme, and even direct system calls to the Win32 API.

File: 2008-10-09-863.org
5:21:#+TAGS: Functional, Programming Language, Scheme
8:58:Most of the folks with whom I've talked about Functional Programming seem to be very skilled in both dynamically and statically typed languages. I've learned only Scheme well. Wondering what should come next, I posted to [[http://groups.google.com/group/comp.lang.scheme/browse_thread/thread/1fa8fb06885cfd8f/][comp.lang.scheme]] asking about what is a good statically typed Functional Programming language to learn after Scheme. Anton's reply piqued my interest. Here are the relevant bits:
13:311:  If you want to learn a more traditional typed functional language, and keep additional learning to a minimum, then SML might make sense both because it's relatively close to Scheme in its semantics, and because it's "small" for a typed functional language. It'll teach you the essentials of typed functional programming. 
19:53:"It'll teach you the essentials of typed functional programming", perfect!
25:145:On the other hand, if you're looking to stretch your brain, Haskell is worth learning. Some might argue that you haven't really done functional programming unless you've done pure functional programming. The combination of purity, lazy evaluation, and a highly advanced type system (particularly in the main Haskell implementation, GHC), makes for a programming style significantly different from that of the (relatively) impure, strict languages like SML, OCaml, and Scheme.

File: 2008-10-09-874.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-10-13-884.org
5:16:#+TAGS: Dylan, Programming Language
6:20:#+TITLE: The Dylan programming language
8:82:When reading about Scheme or Smalltalk, the [[http://en.wikipedia.org/wiki/Dylan_programming_language][Dylan]] programming language is often mentioned.

File: 2008-10-15-891.org
5:25:#+TAGS: HTDP, Learning, Programming, Teaching

File: 2008-10-15-897.org
5:9:#+TAGS: Programming, philosophy

File: 2008-10-15-906.org
5:19:#+TAGS: Learning, Programming, Teaching

File: 2008-10-17-946.org
5:9:#+TAGS: Programming

File: 2008-10-17-968.org
5:19:#+TAGS: Learning, Programming, Teaching

File: 2008-10-17-952.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2008-10-18-979.org
5:9:#+TAGS: Programming, philosophy

File: 2008-10-20-989.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-10-18-984.org
5:9:#+TAGS: Programming

File: 2008-10-20-993.org
5:9:#+TAGS: Programming, philosophy

File: 2008-10-20-999.org
5:9:#+TAGS: Programming
6:10:#+TITLE: Programming Language People
8:38:Sometimes it is helpful to know that programming language creators are people (celebrities?) just like anyone else. 
10:83:[[http://www.angelfire.com/tx4/cus/people/index.html][Here]] are some pictures of programming language people.

File: 2008-10-22-1004.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-10-24-1018.org
5:15:#+TAGS: Lisp, Programming

File: 2008-10-24-1027.org
5:15:#+TAGS: .NET, Programming Language, Scheme

File: 2008-10-24-1041.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-10-24-1035.org
5:9:#+TAGS: Programming
6:12:#+TITLE: A programming interview checklist

File: 2008-10-24-1022.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-10-29-1075.org
5:9:#+TAGS: Programming, philosophy
18:228:Finding an explanation didn't just involve comparing the code, it required understanding that the Python code actually called into C functions, and then converting the Scheme code into a similar "stateful" style of program. In programming, thinking /is/ required!

File: 2008-10-30-1086.org
5:18:#+TAGS: Haskell, Programming Language

File: 2008-10-31-1092.org
5:9:#+TAGS: Programming

File: 2008-11-02-860.org
5:40:#+TAGS: DrScheme, HTDP, Ide, Learning, Programming, Teaching

File: 2008-11-02-1055.org
5:40:#+TAGS: Functional, Haskell, Learning, Programming Language, Scheme, Teaching
8:247:In 1987 [[http://homepages.inf.ed.ac.uk/wadler/][Phil Wadler]] wrote the paper [[http://www.cs.kent.ac.uk/people/staff/dat/miranda/wadler87.pdf][Why Calculating is Better than Scheming]]. It is an essay on the shortcomings of using Scheme as the programming language with which to teach beginning programmers in [[http://mitpress.mit.edu/sicp/full-text/book/book.html][SICP]], and how [[http://miranda.org.uk/][Miranda]] would have a better choice for teaching the software engineers of tomorrow. This was very fun for me to read, and might be for you, too, if you are interested in teaching or the history of both [[http://en.wikipedia.org/wiki/Haskell_(programming_language)][Haskell]] and [[http://en.wikipedia.org/wiki/Scheme_programming_language][Scheme]].
19:267:Wadler's criticism is driven entirely by his experience in the classroom. Having taught a few classes using the SICP curriculum, he found that his students had the same sort of problems over and over. So, his motivation is entirely for helping his students to learn programming. This is really delightful to read criticism driven not only by experience and reason, but a good reason at that. This is remarkably different than what you would hear from the Haskell "masses" who hate Scheme but couldn't tell you why to save their life!
21:81:The paper starts by stating that "[SICP] may start a revolution in the way that programming is taught". 'May' seems to have been the right word. SICP is lauded as /the/ best book on learning how to program, ever, but, on the other hand, it also takes the blame for turning a whole generation sour on functional programming languages. At times it can be hard to understand where SICP fits in history, and without that, criticisms and praise make equally little sense. Reading papers like this one or [[http://en.wikipedia.org/wiki/The_Structure_and_Interpretation_of_the_Computer_Science_Curriculum][SICSC]] help to get a little more perspective on why. Whatever your take on it, SICP is recognized as a classic; and to Wadler's point, maybe if something like it were written using Miranda (or Haskell) it would be even better, but unfortunately for us, nothing like it has been written yet.
28:180:You may have wondered why this post is tagged with 'Haskell". Well, in the paper, Wadler argues that Miranda, a non-strict (aka lazy evaluation), pure (no destructive assignment) programming language would better serve the goals SICP; in other words it is a superior language for teaching. What the paper /doesn't/ convey, though, is just how much of an impact that it made on the author. You should read [[http://research.microsoft.com/~simonpj/papers/history-of-haskell/index.htm][A History of Haskell: being lazy with class]] to see just how influential Miranda was to the creation of [[http://www.haskell.org/][Haskell]]. It is really interesting to sort of peek through a window into the history of Haskell and how it was shaped by Scheme and Miranda! By the way, you replace Haskell anywhere you see Miranda in the paper, and I suspect that it would read exactly the same way.
83:60:-  Reply: The problem of lazy students can't be fixed by a programming language, no matter what any good salesman would tell you! :)

File: 2008-11-03-1143.org
5:40:#+TAGS: Functional, Haskell, Learning, Programming, Teaching
9:136:  [[http://portal.acm.org/citation.cfm?id=871902][Helium]] is a user-friendly compiler designed especially for learning the functional programming language Haskell. The quality of the error messages has been the main concern both in the choice of the language features and in the implementation of the compiler. Helium implements almost full Haskell, where the most notable difference is the absence of type classes. Our goal is to let students learn functional programming more quickly and with more fun. The compiler has been successfully employed in two introductory programming courses at Utrecht University.

File: 2008-11-03-1150.org
5:15:#+TAGS: .NET, Programming Language, Scheme

File: 2008-11-07-1153.org
5:19:#+TAGS: Learning, Programming, philosophy
9:216:  No amount of language design can force a programmer to write clear programs. If the programmer's conception of the problem is badly organized, then his programs will also be badly organized. The extent to which a programming language can help a programmer to organize his problem is precisely the extent to which it provides features appropriate to his problem domain. The emphasis should not be on eliminating "bad" language constructs, but on discovering or inventing helpful ones.

File: 2008-11-11-1161.org
5:9:#+TAGS: Programming

File: 2008-11-13-1174.org
5:9:#+TAGS: Programming, philosophy

File: 2008-11-15-1179.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-11-15-1188.org
5:21:#+TAGS: Emacs, Ide, Programming Language, elisp

File: 2008-11-15-1199.org
5:19:#+TAGS: Learning, Programming, Scheme

File: 2008-11-15-1194.org
5:9:#+TAGS: Programming Language, Scheme, iPhone

File: 2008-11-17-1210.org
5:21:#+TAGS: Fun, LaTeX, Programming Language, TeX
6:23:#+TITLE: An ICFP 2008 Programming Contest Solution in TeX
8:141:[[http://sdh33b.blogspot.com/2008/07/icfp-contest-2008.html][Here]] is a solution to the [[http://en.wikipedia.org/wiki/Ant_Wars][2008 ICFP Programming Contest]] in [[http://en.wikipedia.org/wiki/TeX][TeX]].

File: 2008-11-18-1229.org
5:9:#+TAGS: Programming Language, Scheme

File: 2008-11-21-1236.org
5:15:#+TAGS: HTML, Programming Language

File: 2008-11-25-1241.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-11-26-1244.org
5:15:#+TAGS: Java, Programming Language

File: 2008-11-27-1248.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy

File: 2008-11-27-1251.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-12-08-1272.org
5:19:#+TAGS: Learning, Programming, philosophy
14:42:I have the the distinction of being the "programming languages guru" here at Dobbs Code Talk. So what does this mean to me? It means that after many years of programming and studying language design, I am reasonably aware about what it is that I don't know about programming languages. Contrast this to something like helicopter mechanics, for which the only meaningful thing I can say is that I know nothing about it.

File: 2008-12-09-1287.org
5:9:#+TAGS: Programming Language

File: 2008-12-14-1317.org
5:15:#+TAGS: Perl, Programming Language, Scheme, philosophy
20:58:(via [[http://www.computerworld.com.au/article/270267/-z_programming_languages_perl?pp=5&fp=&fpid=][Computerworld]])
28:1:Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.

File: 2008-12-22-1342.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-12-13-1306.org
5:24:#+TAGS: Learning, PLT, Programming Language, Scheme, Teaching
14:179:You may have noticed a number of emails from my students at UMass Lowell. I had assigned a final project in our required "[[http://www.cs.uml.edu/~holly/91.301/][Organization of Programming Languages]]" course which is based on the [[http://mitpress.mit.edu/sicp/full-text/book/book.html][SICP text]]. This is the first time that the course included a significant, independent project component, and I did encourage them to ask you for assistance.
25:54:-  [[http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/SchemeStock][SchemeStock]]
26:54:-  [[http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/MusicDiscovery][MusicDiscovery]]
27:54:-  [[http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/Scheme-in-C-Game-Engine][Scheme-in-C-Game-Engine]]
28:54:-  [[http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/IRobotCreateSchemeAPI][IRobotCreateSchemeAPI]]
29:54:-  [[http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/DesktopReliefEngraving][DesktopReliefEngraving]]
54:55:really exercising ideas in Scheme and PLs (functional programming,
133:49:http://www.cs.uml.edu/ecg/index.php/OrganizationProgrammingLanguagesFall2008/Project)

File: 2008-12-29-1371.org
5:19:#+TAGS: Learning, Programming, Teaching
10:112:Most computer science educators hold strong opinions about the "right" approach to teaching introductory level programming. Unfortunately, we have comparatively little hard evidence about the effectiveness of these various approaches because we generally lack the infrastructure to obtain sufficiently detailed data about novices' programming habits.To gain insight into students' programming habits, we developed Marmoset, a project snapshot and submission system. Like existing project submission systems, Marmoset allows students to submit versions of their projects to a central server, which automatically tests them and records the results. Unlike existing systems, Marmoset also collects finegrained code snapshots as students work on projects: each time a student saves her work, it is automatically committed to a CVS repository.We believe the data collected by Marmoset will be a rich source of insight about learning to program and software evolution in general. To validate the effectiveness of our tool, we performed an experiment which found a statistically significant correlation between warnings reported by a static analysis tool and failed unit tests.To make fine-grained code evolution data more useful, we present a data schema which allows a variety of useful queries to be more easily formulated and answered.

File: 2008-12-31-1340.org
5:9:#+TAGS: Programming, philosophy
10:564:The simplest implication is that you now have the ability to work with 100,000+ characters. In case you felt limited by the inability to use the characters of your native tongue like [[http://www.alanwood.net/unicode/tamil.html][Tamil]] or perhaps [[http://en.wikipedia.org/wiki/List_of_Unicode_characters#Braille_Patterns][Braille]], you are restricted no more. Scientific programmers may enjoy using Greek letters; and who of us wouldn't like to use the letter π to represent [[http://en.wikipedia.org/wiki/Pi][Pi]]? For [[http://en.wikipedia.org/wiki/Scheme_(programming_language)][Schemers]], perhaps you would use → rather than ->. 

File: 2008-12-31-1408.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2008-12-31-1415.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-01-01-1419.org
5:9:#+TAGS: Programming
6:25:#+TITLE: Envy Code R: A Programming Font

File: 2009-01-02-1426.org
5:17:#+TAGS: Macros, Programming Language, Scheme

File: 2009-01-02-1476.org
5:9:#+TAGS: Programming, Programming Language, Scheme
8:165:[[http://www.google.com/coop/cse?cx=008072110934663485714%3Af1www7xnb5w&hl=en][All Scheme Search]] is a Google based search engine for "Everything about the Scheme Programming Language".

File: 2009-01-02-1482.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-02-1486.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2009-01-02-1490.org
5:24:#+TAGS: Concatenative, Programming
6:18:#+TITLE: The Joy programming language
10:37:[[http://en.wikipedia.org/wiki/Joy_(programming_language)][Joy]] was pointed out as a great place to start, and in particular [[http://www.latrobe.edu.au/philosophy/phimvt/joy/j01tut.html][this tutorial]] is the best place to start with Joy.

File: 2009-01-03-1501.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-01-04-1510.org
5:9:#+TAGS: Programming Language, Rebol, Scheme

File: 2009-01-04-1514.org
5:14:#+TAGS: C++, Programming Language, Scheme

File: 2009-01-04-1520.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-07-1541.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-04-1524.org
5:20:#+TAGS: DSL, Lisp, Programming
61:35:are three approaches to designing programming language syntax.  The first is to
62:33:develop a good understanding of programming language grammars and parsers and

File: 2009-01-08-1552.org
5:28:#+TAGS: Java, Objective-C, Programming Language, iPhone
15:426:  The goal of [[http://www.xmlvm.org/overview/][XMLVM]] is to offer a flexible and extensible cross-compiler toolchain. Instead of cross-compiling on a source code level, XMLVM cross-compiles byte code instructions from Sun Microsystem's virtual machine and Microsoft's Common Language Runtime. The benefit of this approach is that byte code instructions are easier to cross-compile and the difficult parsing of a high-level programming language is left to a regular compiler. In XMLVM, byte code-based programs are represented as XML documents. This allows manipulation and translation of XMLVM-based programs using advanced XML technologies such as XSLT, XQuery, and XPath.

File: 2009-01-08-1562.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-14-1601.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-01-14-1577.org
25:41:14. [[http://www.sigplan.org/][SIGPLAN: Programming Languages]]

File: 2009-01-14-1597.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-14-1605.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-15-1609.org
5:14:#+TAGS: JVM, Programming Language

File: 2009-01-18-1629.org
5:16:#+TAGS: Dylan, Programming Language
6:20:#+TITLE: The Dylan programming language Wiki
8:41:[[http://wiki.opendylan.org/][The Dylan programming language]]Wiki is the motherload for information on Dylan.

File: 2009-01-18-1618.org
5:16:#+TAGS: Dylan, Programming Language
8:423:I started learning more about Dylan by reading the material listed in the [[http://groups.google.com/group/comp.lang.dylan/browse_thread/thread/708805852fccf72f][Dylan Resource Guide]] in [[http://groups.google.com/group/comp.lang.dylan/topics][comp.lang.dylan]]. It is true what they say; Dylan and Scheme seem to be very similar. When you take into account what Dylan [[http://www.wisdomandwonder.com/link/884/the-dylan-programming-language][purports to offer]], it sounds very interesting!
17:48:-  [[http://www.opendylan.org/books/dpg][Dylan Programming]]: Dylan Programming is a book that teaches how to program in Dylan.

File: 2009-01-18-1633.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-01-23-1643.org
5:16:#+TAGS: Macro, Programming Language, Scheme

File: 2009-01-20-1639.org
5:18:#+TAGS: Haskell, Programming Language, mathematics

File: 2009-01-28-1660.org
5:9:#+TAGS: Programming Language, Scheme
16:38:Until now, the essence of Scheme, “Programming languages should be designed not by piling feature on top of feature...”, has served academia well, but not the industry. Consequently, the community has moved forward independently from the standard. While this is not a problem in and of itself (the SRFIs, for example, have served the community well); incompatible changes have been made between distributions resulting in frustrating incompatibilities. Solutions to standard problems like modules ought not to require any effort to be made portable across different implementations.

File: 2009-01-23-1654.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2009-02-01-1684.org
5:19:#+TAGS: Learning, Programming, Teaching
9:280:  [[http://theory.stanford.edu/~aiken/moss/][Moss]] (for a Measure Of Software Similarity) is an automatic system for determining the similarity of C, C++, Java, Pascal, Ada, ML, Lisp, or Scheme programs. To date, the main application of Moss has been in detecting plagiarism in programming classes. Since its development in 1994, Moss has been very effective in this role. The algorithm behind moss is a significant improvement over other cheating detection algorithms (at least, over those known to us).

File: 2009-02-02-1688.org
5:21:#+TAGS: Functional, Programming Language
8:166:Jane Street is sponsoring a [[http://ocaml.janestreet.com/?q=node/57][summer project]] for students in 2009 with the goal of "encourag[ing] growth in the functional programming community".

File: 2009-02-06-1698.org
5:14:#+TAGS: PLT, Programming Language, Scheme
19:339:  Welcome to the plt-dev@list.cs.brown.edu mailing list! This list is for discussions on the implementation and development of PLT Scheme. It is aimed at people who are interested in contributing to PLT Scheme, or who are interested in the implementation of PLT Scheme. However, it is not for general discussion of Scheme, PLT Scheme, or programming -- please use the plt-scheme list for those.

File: 2009-02-10-1719.org
5:19:#+TAGS: Learning, Programming, Programming Language, Scheme, Teaching
6:48:#+TITLE: Normal order and applicative order in Programming Languages
13:96:  Normal order and applicative order are failed attempts to explain the nature of call-by-name programming languages and call-by-value programming languages as models of the lambda calculus. Each describes a so-called \_reduction strategy\_, which is an algorithm that picks the position of next redex BETA that should be reduced. By 1972, it was clear that instead you want different kind of calculi for different calling conventions and evaluation strategies (to the first outermost lambda, not inside). That is, you always reduce at the leftmost-outermost point in a program but you use either BETA-NAME or BETA-VALUE. Non-PL people were confused (and still are) because BETA-NAME looks like BETA but nearly 40 years later, everyone should figure this out. SICP was written when the majority of people were still confused. -- Matthias

File: 2009-02-11-1730.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-02-15-1758.org
5:14:#+TAGS: PLT, Programming Language, Scheme
6:10:#+TITLE: Programming gerbils: Distributed programming with PLT-Scheme
11:43:Dimitris Vyzovitis will give a talk about Programming gerbils: Distributed programming with PLT-Scheme. 
13:64:vyzo will talk about gerbil, a little language for distributed programming using PLT-Scheme. Gerbil is a macro language that provides facilities for actor-based distributed programs and transparent network simulation. 

File: 2009-02-15-1768.org
12:23:SCHEME AND FUNCTIONAL PROGRAMMING WORKSHOP 2009

File: 2009-02-15-1774.org
5:17:#+TAGS: Macros, Programming Language, Scheme

File: 2009-02-15-1781.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-15-1788.org
5:15:#+TAGS: Java, Programming Language

File: 2009-02-16-1794.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-17-1802.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-17-1813.org
5:9:#+TAGS: Programming Language, Scheme
52:11:implement programming languages do not wish to study mathematical  

File: 2009-02-17-1808.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-02-17-1817.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-18-1822.org
5:9:#+TAGS: Programming, Scheme

File: 2009-02-18-1827.org
5:38:#+TAGS: Functional, Object Oriented, Programming
12:99:Basically it tells a story and makes an argument about how one might go about moving forward with programming, and it does well enough in both regards.

File: 2009-02-18-1834.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-18-1845.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-21-1863.org
5:19:#+TAGS: Learning, Programming Language, Scheme, Teaching, philosophy
6:24:#+TITLE: Nils M Holm's Programming Textbooks Free

File: 2009-02-21-1868.org
5:26:#+TAGS: Learning, Logic, Programming, Teaching

File: 2009-02-21-1873.org
5:25:#+TAGS: HTDP, Learning, Programming, Teaching, mathematics
6:33:#+TITLE: HtDP Teaches More Than Programming

File: 2009-02-21-1878.org
5:27:#+TAGS: Functional, Java, Programming Language
9:107:  [[http://functionaljava.org/][Functional Java]] is an open source library that aims to prepare the Java programming language for the inclusion of closures. It also serves as a platform for learning functional programming concepts by introducing these concepts using a familiar language. The library is intended for use in production applications and is thoroughly tested using the technique of automated specification-based testing with [[http://code.google.com/p/scalacheck/][ScalaCheck]].

File: 2009-02-21-1882.org
5:22:#+TAGS: Macros, PLT, Programming Language, Scheme

File: 2009-02-21-1887.org
5:24:#+TAGS: Learning, PLT, Programming
32:15:0: Imperative programming.
33:113:1: The Little LISPer, which is a great primer before glancing into 4. (about recursion, not really a book about programming, imho)
34:51:2: Greg Michaelson, An Introduction to Functional Programming through Lambda Calculus (not a masterpiece, but easy to read)
40:71:You can regard LC and CL as the ultimate mathematical abstractions of programming languages. In fact LC consists of the ultimate lambda and applications only, nothing else. CL goes even further. It has applications only, no lambda, just a few primitive functions (possibly only one) Yet CL and LC can be proven to incorporate all "definable functions". These are not programming languages for practical use, They are formal mathematical systems of outraging beauty. If you want to make working programs, you'd better not follow my path, I think.
42:93:LC is an important piece of mathematics for the formal study of the properties of real life programming languages. It is used extensively in scientific studies on real life programming languages. Scheme can rather easily be described with mathematical precision in terms of LC. IIRC Algol60 has been described in terms of LC too. As an example, the semantical description of Scheme-R6RS is based on knowledge based on LC.

File: 2009-02-21-1899.org
5:25:#+TAGS: HTDP, Learning, Programming, SICP, Scheme, Teaching

File: 2009-02-23-1910.org
5:21:#+TAGS: Functional, Programming, Programming Language, Scheme

File: 2009-02-22-1904.org
5:9:#+TAGS: Programming

File: 2009-02-25-1919.org
5:9:#+TAGS: Programming Language, Scheme
13:67:So I say, press our advantage. Improve the macro system. Show the programming language world what the real power of "a very small number of rules for forming expressions" is.
15:91:That's not to say that we should neglect the other things that make Scheme a high-quality programming language. They are important, and Scheme needs a community that cares about all her aspects. But this is not the tail wagging the dog - it's knowing where our strengths lie.

File: 2009-02-25-1925.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-25-1927.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-02-25-1964.org
5:9:#+TAGS: Programming, philosophy
6:40:#+TITLE: Orthography and Typography in Programming
8:294:[[http://eval.apply.googlepages.com/][jrm]] wrote a good post [[http://lists.r6rs.org/pipermail/r6rs-discuss/2009-February/004211.html][here]] about the difference between [[http://en.wikipedia.org/wiki/Orthography][orthography]] and [[http://en.wikipedia.org/wiki/Typography][typography]] in programming. The context is a discussion about case-sensitivity in Scheme.

File: 2009-02-25-1955.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy
9:17:  I'm not doing programming for it's own sake, but because I'm trying to get my real work done and that involves writing code. I have neither the inclination nor the luxury of time to really delve down and spend three or six months learning a complex language in the hope that I'll be more productive

File: 2009-02-25-1978.org
5:25:#+TAGS: Learning, Lisp, Programming, Programming Language, Scheme, Teaching, philosophy
9:272:  Scheme and Lisp force you *think* from the get-go. Most engineers and programmers hate to do that and it makes them uncomfortable. Starting a program in Java or C is easy. There's a pile of boilerplate you can type without thinking about it, and it `feels' like you're programming. Then you have to haul out the bag of tools like the compiler and the linker and makefiles or ant. There's a lot of busy work needed just to get going, and you feel like you've accomplished something.

File: 2009-02-25-1973.org
5:9:#+TAGS: Programming Language, Scheme
9:91:  [[http://www.red-bean.com/trac/minor/][Minor Scheme]]is an implementation of the Scheme programming language. Its planned features include: 

File: 2009-02-28-1992.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-03-02-1996.org
5:9:#+TAGS: Programming, philosophy
8:15:In regards to programming: 

File: 2009-03-03-2010.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-03-03-2015.org
5:9:#+TAGS: Programming, philosophy
9:866:  [[http://qconlondon.com/london-2009/speaker/Tony+Hoare][I call it my billion-dollar mistake]]. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn't resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years. In recent years, a number of program analysers like PREfix and PREfast in Microsoft have been used to check references, and give warnings if there is a risk they may be non-null. More recent programming languages like Spec# have introduced declarations for non-null references. This is the solution, which I rejected in 1965.
16:32:(via [[http://www.reddit.com/r/programming/comments/81k8w/tony_hoare_sorry_for_inventing_the_null_pointer/][Reddit]])

File: 2009-03-08-2028.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-03-11-2045.org
5:9:#+TAGS: Programming

File: 2009-03-19-2064.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-03-18-2057.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-03-19-2073.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy
6:55:#+TITLE: Concepts, Techniques, and Models of Computer Programming
8:178:[[http://groups.google.com/group/comp.lang.scheme/browse_thread/thread/42a80bf2fab7c52b/58f16942337a2346#58f16942337a2346][Here]] I asked "What is a good multi-paradigm book on programming?".
14:49:  "Concepts, Techniques, and Models of Computer Programming" by Peter Van Roy and Seif Haridi 

File: 2009-03-22-2087.org
5:15:#+TAGS: Java, Programming Language

File: 2009-03-23-2090.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy
8:678:A few weeks on a PBS television show hosted by Alan Alda the scientists being interviewed were talking about the "Contentment of Content". They said the the research shows that most humans learn the bulk of their knowledge (in particular their approach for all sorts of problem solving) younger in life and never learn any new approaches later on because it would just show them how much they don't know. In other words; it would require the act of learning and that takes work. They go on to explain that in fact, this approach not only happens at the macro level in life but also in the macro level for particular areas of expertise. For sake of discussion, I would focus on programming.

File: 2009-03-23-2100.org
5:14:#+TAGS: PLT, Programming, Programming Language, Scheme, philosophy
6:19:#+TITLE: Literate Programming in Scheme
8:166:The release notes [[https://www.blogger.com/comment.g?blogID=2080885971644496896&postID=109123988427683012][here]] for PLT Scheme 4.1.5 mention support for literate programming. Not being familiar with the term; I read more about it on Wikipedia [[http://en.wikipedia.org/wiki/Literate_programming][here]].
12:36:PLT Scheme recently added literate programming support; documented [[http://download.plt-scheme.org/doc/html/scribble/lp.html][here]]. One example of its application is in Chat Noir [[http://docs.plt-scheme.org/games/chat-noir.html][here]]; and the source code for it may be viewed [[http://svn.plt-scheme.org/plt/tags/v4.1.5/collects/games/chat-noir/chat-noir-literate.ss][here]] (Thanks Robby).
14:21:A tool for literate programming in Scheme called is schemeweb located [[http://schemephil.googlepages.com/schemeweb.html][here]] (Thanks Phil).

File: 2009-03-23-2096.org
5:9:#+TAGS: Programming, philosophy

File: 2009-03-24-2110.org
5:19:#+TAGS: Learning, Programming, Python, Scheme, Teaching, philosophy
9:87:  Costanza asked Sussman why MIT had switched away from Scheme for their introductory programming course, 6.001. This was a gem. He said that the reason that happened was because engineering in 1980 was not what it was in the mid-90s or in 2000. In 1980, good programmers spent a lot of time thinking, and then produced spare code that they thought should work. Code ran close to the metal, even Scheme -- it was understandable all the way down. Like a resistor, where you could read the bands and know the power rating and the tolerance and the resistance and V=IR and that's all there was to know. 6.001 had been conceived to teach engineers how to take small parts that they understood entirely and use simple techniques to compose them into larger things that do what you want.
11:5:But programming now isn't so much like that, said Sussman. Nowadays you muck around with incomprehensible or nonexistent man pages for software you don't know who wrote. You have to do basic science on your libraries to see how they work, trying out different inputs and seeing how the code reacts. This is a fundamentally different job, and it needed a different course.

File: 2009-03-26-2115.org
5:9:#+TAGS: Programming, philosophy

File: 2009-03-27-2120.org
5:9:#+TAGS: Programming
9:390:  Oddly, graphics processing is very functional, yet procedural languages are used to teach it. In a nutshell, matrices operate on matrices operate ... . In between some of the stages, drawing takes place; the rightmost argument is the beginning of the scene. Years ago, I gave up learning OpenGL because it was so tedious. Now that I am enlightened by FP, I understand and enjoy graphics programming so much more that I wrote an API just for the fun of it.

File: 2009-03-27-2124.org
5:9:#+TAGS: Programming

File: 2009-03-27-2129.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2009-03-29-2137.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-03-29-2161.org
5:15:#+TAGS: Java, Programming Language

File: 2009-04-03-2167.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-08-2549.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-13-2560.org
5:14:#+TAGS: Ide, Programming Language, Scheme

File: 2009-04-14-2576.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-14-2566.org
5:9:#+TAGS: Programming Language
6:21:#+TITLE: Some Great Programming Language Blogs
8:139:[[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2009/04/grant-rettke-google-reader-subscriptions.xml][Here]] are some great programming language blogs. It is an [[http://en.wikipedia.org/wiki/OPML][OPML]] file; and in the browser it will just say "Grant Rettke subscriptions in Google Reader". You need to import it into your RSS reader if you would like to check it out.

File: 2009-04-14-2580.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-15-2593.org
5:15:#+TAGS: Java, Programming Language

File: 2009-04-16-2610.org
5:9:#+TAGS: Programming, philosophy

File: 2009-04-16-2614.org
5:17:#+TAGS: Macros, Programming Language, Ruby

File: 2009-04-16-2618.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-18-2652.org
5:9:#+TAGS: Programming Language, Scheme
9:33:  The 4th edition of The Scheme Programming Language by R. Kent Dybvig is announced in the MIT Press catalog. 

File: 2009-04-18-2648.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-18-2662.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-18-2666.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-19-2683.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-19-2689.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-19-2700.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-21-2712.org
5:19:#+TAGS: Java, ML, Programming Language
8:173:[[http://wadler.blogspot.com/2009/04/famelab-what-does-logic-have-to-do-with.html][Here]] is a video of Philip Wadler talking about his (and others) history with logic and programming languages.

File: 2009-04-23-2716.org
5:9:#+TAGS: Programming Language, Scala

File: 2009-04-23-2720.org
5:9:#+TAGS: Programming Language, Python

File: 2009-04-23-2727.org
5:27:#+TAGS: C++, Objective-C, Programming Language

File: 2009-04-23-2732.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-24-2744.org
5:23:#+TAGS: Chez, Ikarus, Programming Language, Scheme

File: 2009-04-25-2753.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-04-25-2759.org
5:16:#+TAGS: Macro, Programming Language, Scheme

File: 2009-04-25-2768.org
5:23:#+TAGS: Build, Maven, Programming

File: 2009-04-25-2773.org
5:23:#+TAGS: Build, Maven, Programming

File: 2009-04-26-2785.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-04-26-2778.org
5:9:#+TAGS: Programming Language, Scala

File: 2009-04-26-2791.org
5:17:#+TAGS: Django, Programming Language, Python, Web

File: 2009-04-27-2802.org
5:9:#+TAGS: Programming Language, Scheme
14:200:Gerbil is a distributed dialect of scheme implemented as a plt macro language. As such it inherits all the traits of plt-scheme and provides abstractions and libraries for actor-oriented distributed programming.

File: 2009-04-30-2806.org
5:22:#+TAGS: Objective-C, Programming Language, iPhone

File: 2009-04-30-2810.org
5:23:#+TAGS: Build, Maven, Programming

File: 2009-04-30-2815.org
5:23:#+TAGS: Build, Maven, Programming

File: 2009-05-01-2819.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-01-2827.org
5:15:#+TAGS: .NET, Programming Language

File: 2009-05-02-2831.org
5:16:#+TAGS: Books, Programming Language, philosophy
6:25:#+TITLE: Masterminds of Programming
8:16:Masterminds of Programming looks like it might be a fun book to read based on the few revies on LtU so far.

File: 2009-05-02-2835.org
5:9:#+TAGS: Programming Language, philosophy
6:15:#+TITLE: Most programming languages are created without any theory
8:106:The argument is made in [[http://lambda-the-ultimate.org/node/3296#comment-48388][this]] quote that most programming languages are created without any theory, and end up looking for it later, and rarely find it. 
17:13:Robin: Most programming languages have been desgined without first thinking about the theory on which the meaning would be based. So, very often a language gets designed and implemented, and then what it means, what is supposed to happen when every program is run, is not necessarily predicted. Of course it was in some cases wonderfuly predicted, for example, in ALGOL60; the ALGOL60 report of 1960 was so accurate that one could follow it and find out what was going to happen. This isn't always the case. Even in the good languages, the formal basis is not there before the language arrives, so what people do is later to retrofit a theory of meaning to the language, and maybe that means that the design could not take advantage of theoretical understanding.

File: 2009-05-02-2839.org
5:14:#+TAGS: Fun, Programming
10:56:Whatever this case, this must have been an interesting programming problem.

File: 2009-05-03-2850.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-05-2920.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-05-03-2889.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-06-2925.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-06-2929.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-08-2941.org
5:15:#+TAGS: Lisp, Programming Language

File: 2009-05-08-2937.org
5:17:#+TAGS: Macros, Programming Language, Scheme

File: 2009-05-08-2945.org
5:14:#+TAGS: Fun, Programming Language

File: 2009-05-09-2957.org
5:15:#+TAGS: .NET, Programming Language

File: 2009-05-09-2961.org
5:9:#+TAGS: Programming, philosophy

File: 2009-05-09-2965.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-05-09-2969.org
5:9:#+TAGS: Programming Language, Ruby

File: 2009-05-16-2983.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-12-2979.org
5:9:#+TAGS: Programming, philosophy
6:37:#+TITLE: The Psychology of Computer Programming
8:75:Edward mentioned what looks like an [[http://www.geraldmweinberg.com/Site/Programming_Psychology.html][interesting book]] about how to be happy in your career as a computer programmer [[http://list.cs.brown.edu/pipermail/plt-scheme/2009-May/033060.html][here]].

File: 2009-05-16-2991.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-21-2999.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-24-3014.org
5:9:#+TAGS: Programming Language, forth

File: 2009-05-25-3018.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-05-28-3032.org
5:14:#+TAGS: Ide, Programming Language, Python, VI

File: 2009-05-28-3036.org
5:9:#+TAGS: Programming

File: 2009-05-30-3047.org
10:32:(via [[http://www.reddit.com/r/programming/comments/8o2qi/big_mess_o_wires_homemade_cpu/][reddit]])

File: 2009-05-30-3042.org
5:19:#+TAGS: Learning, Programming Language

File: 2009-05-30-3052.org
10:32:(via [[http://www.reddit.com/r/programming/comments/8nk5t/how_spellcheckers_work_levenshtein_soundex_and/][reddit]])

File: 2009-05-30-3056.org
5:9:#+TAGS: Programming Language, philosophy
16:32:(via [[http://www.reddit.com/r/programming/comments/8np9t/sicp_has_its_own_agenda_convincing_the_reader/][reddit]])

File: 2009-05-31-3064.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-31-3060.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-31-3069.org
5:17:#+TAGS: Ikarus, Programming Language, Scheme

File: 2009-05-31-3073.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-31-3082.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-05-31-3091.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Racket, Scheme
8:10:[[http://programming-musings.org/2009/05/14/geiser/][Here]] is the announcement for a new Emacs-Scheme interaction mode that already works with PLT and Guile, and will probably soon be working with Ikarus, too.

File: 2009-05-31-3087.org
13:519:  This text is the first comprehensive presentation of reduction semantics in one volume; it also introduces the first reliable and easy-to-use tool set for such forms of semantics. Software engineers have long known that automatic tool support is critical for rapid prototyping and modeling, and this book is addressed to the working semantics engineer (graduate student or professional language designer). The book comes with a prototyping tool suite to develop, explore, test, debug, and publish semantic models of programming languages. With PLT Redex, semanticists can formulate models as grammars and reduction models on their computers with the ease of paper and pencil.

File: 2009-05-31-3095.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-05-31-3103.org
5:14:#+TAGS: PLT, Programming Language, Scheme
16:319:Thomas is 10 years old and he wants to start a software company with his friends! He programs in C++, Java, and Python?! Wow. Leo says he wants Thomas to learn these programs right, not just noodling with them and learning bad habits. So Leo says that Alice is a good place to start, but Leo suggests HTDP.ORG. It's a programming book written by software professors all over the country and teaches "SCHEME," which is a "flavor" of a programming language called LISP. Download DrScheme. This will teach you to plan, design, and organize your software ideas.

File: 2009-06-01-3109.org
5:19:#+TAGS: Ide, PLT, Programming Language, Scheme

File: 2009-06-03-3114.org
5:14:#+TAGS: Fun, Programming

File: 2009-06-06-3123.org
5:9:#+TAGS: Programming
8:89:[[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]] is my new favorite programming font. It looks great /and/ it works fine across Windows and OS X.

File: 2009-06-06-3131.org
5:17:#+TAGS: Career, Programming
10:32:(via [[http://www.reddit.com/r/programming/comments/8ou6c/top_10_reasons_why_employees_leave_in_it/][reddit]])

File: 2009-06-06-3135.org
5:9:#+TAGS: Programming Language
6:61:#+TITLE: A Visualization of the Speed and Size of Different Programming Languages
8:126:[[http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html][Here]] is a great article that compares different programming languages speed and size using visualizations. It is very easy to see the differences using his approach.
10:32:(via [[http://www.reddit.com/r/programming/comments/8omev/the_speed_size_and_dependability_of_programming/][reddit]])

File: 2009-06-06-3139.org
5:18:#+TAGS: Haskell, Programming Language
20:135:(via [[http://donsbot.wordpress.com/2009/06/02/the-haskell-platform-2009-2-0-1/][Control.Monad.Writer]] via [[http://www.reddit.com/r/programming/comments/8pih1/the_haskell_platform_2009201_a_standard_haskell/][reddit]])

File: 2009-06-06-3144.org
5:27:#+TAGS: Computer Science, Programming Language
6:20:#+TITLE: Standford Programming Paradigms Course Videos
9:3:  Programming Paradigms (CS107) introduces several programming languages, including C, Assembly, C++, Concurrent Programming, Scheme, and Python. The class aims to teach students how to write code for each of these individual languages and to understand the programming paradigms behind these languages.
16:32:(via [[http://www.reddit.com/r/programming/comments/8p8qi/stanford_university_course_programming_paradigms/][reddit]])

File: 2009-06-06-3148.org
5:9:#+TAGS: Programming Language, philosophy
6:21:#+TITLE: Choosing a Programming Language is Really Choosing a Community
8:135:Michele wrote [[http://www.artima.com/weblogs/viewpost.jsp?thread=259296][this]] /great/ article about how for some of us, choosing a programming language is really choosing a community.

File: 2009-06-06-3155.org
5:27:#+TAGS: Objective-C, PLT, Programming Language, Scheme

File: 2009-06-07-3188.org
5:9:#+TAGS: Programming, iPhone

File: 2009-06-07-3192.org
5:19:#+TAGS: Business, Programming Language, Scheme, philosophy

File: 2009-06-07-3229.org
10:32:(via [[http://www.reddit.com/r/programming/comments/8o5w6/iphone_doom_classic_progress_report/][reddit]])

File: 2009-06-07-3232.org
5:9:#+TAGS: Programming Language, Smalltalk, iPhone
12:32:(via [[http://www.reddit.com/r/programming/comments/8nhkh/squeak_smalltalk_comes_to_the_iphone_interview/][reddit]])

File: 2009-06-07-3261.org
5:17:#+TAGS: Eiffel, Programming Language, iPhone

File: 2009-06-07-3257.org
5:17:#+TAGS: Eiffel, Programming Language, iPhone

File: 2009-06-07-3273.org
5:14:#+TAGS: PHP, Programming Language

File: 2009-06-09-3301.org
5:19:#+TAGS: Ide, PLT, Programming Language, Scheme

File: 2009-06-08-3295.org
5:16:#+TAGS: Guile, Programming Language, Scheme

File: 2009-06-10-3306.org
5:21:#+TAGS: IronScheme, Programming Language, Scheme

File: 2009-06-16-3322.org
5:9:#+TAGS: Programming Language, Scheme, iPhone

File: 2009-06-12-3311.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-06-16-3350.org
10:32:(via [[http://www.reddit.com/r/programming/comments/8rlfx/org_mode_organize_your_life_in_plain_text/][reddit]])

File: 2009-06-16-3335.org
5:14:#+TAGS: Fun, Programming Language
10:32:(via [[http://www.reddit.com/r/programming/comments/8q9gm/rich_hickey_on_testing/][reddit]])

File: 2009-06-17-3354.org
5:9:#+TAGS: Programming, philosophy

File: 2009-06-21-3393.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-06-21-3387.org
5:17:#+TAGS: Gambit, Programming Language, Scheme, iPhone

File: 2009-06-21-3397.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-06-21-3401.org
5:21:#+TAGS: Functional, Programming
6:24:#+TITLE: The 12th ICFP Programming Contest
8:42:The [[http://icfpcontest.org/][12th ICFP Programming Contest]] is starting up again next week.
10:32:(via [[http://www.reddit.com/r/programming/comments/8txm4/12th_annual_icfp_programming_contest_begins_next/][reddit]])

File: 2009-06-21-3409.org
5:17:#+TAGS: Ikarus, Programming Language, Scheme

File: 2009-06-21-3415.org
5:32:#+TAGS: Computer Science, PLT, Programming Language

File: 2009-06-21-3419.org
5:20:#+TAGS: .NET, PLT, Programming Language, Scheme

File: 2009-06-28-3441.org
5:9:#+TAGS: Programming Language, Smalltalk
12:32:(via [[http://www.reddit.com/r/programming/comments/8up13/pharo_smalltalk_a_fork_of_squeak_geared_toward/][reddit]])

File: 2009-06-28-3448.org
5:18:#+TAGS: Haskell, Programming Language, iPhone
12:32:(via [[http://www.reddit.com/r/programming/comments/8upau/ipwn_studios_releasing_haskell_on_the_iphone/][reddit]])

File: 2009-06-28-3452.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2009-06-28-3456.org
5:17:#+TAGS: Design, Programming Language, Scheme, philosophy
6:42:#+TITLE: Implementing an Object-Oriented Programming System in Scheme
8:27:[[http://www.reddit.com/r/programming/comments/8v069/oleg_it_is_actually_rather_easy_to_implement_an/][Here]] is some entertaining discussion about implementing an OOP system in Scheme.

File: 2009-06-30-3471.org
5:15:#+TAGS: .NET, Programming Language, iPhone
6:10:#+TITLE: Programming .NET on the iPhone
10:32:(via [[http://www.reddit.com/r/programming/comments/8wtx7/code_with_cxcode_and_monotouch_for_the_iphone/][reddit]])

File: 2009-07-05-3475.org
5:27:#+TAGS: Computer Science, Programming Language, Scheme

File: 2009-07-05-3493.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-07-08-3501.org
5:17:#+TAGS: Gambit, Programming Language, Scheme, iPhone

File: 2009-07-08-3511.org
5:18:#+TAGS: Haskell, Programming Language
10:32:(via [[http://www.reddit.com/r/programming/comments/8z0pz/haskell_2010/][reddit]]).

File: 2009-07-08-3506.org
5:21:#+TAGS: IronScheme, Programming Language, Scheme

File: 2009-07-19-3515.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-07-19-3519.org
5:26:#+TAGS: Impromptu, OS X, Programming Language, Scheme
9:68:  [[http://impromptu.moso.com.au/index.html][Impromptu]] is an OSX programming environment for composers, sound artists, VJ's and graphic artists with an interest in live or interactive programming. Impromptu is a Scheme language environment, a member of the Lisp family of languages.

File: 2009-07-19-3527.org
5:14:#+TAGS: C++, Programming Language

File: 2009-07-20-3540.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2009-07-20-3531.org
5:9:#+TAGS: Programming, philosophy

File: 2009-07-20-3546.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2009-07-25-3575.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2009-07-27-3605.org
5:19:#+TAGS: Business, Programming
19:91:In the nineties we went from text-based applications to GUI applications. From structured programming to object oriented programming, from compiled code to byte code, from desktop applications to web based applications, and eventually to ”enterprise applications”. And that is where we are today. Sure, we have new frameworks and a few additional tools like Hibernate and AJAX. The F-16s have upgraded avionics and weaponry too. But we are still flying the same basic airframe.
31:118:In the late nineties and early 2000s it was an exciting time in IT. People were learning a lot about object-oriented programming and different styles of running software projects. Things have settled down though, like Zac explained. I had always assumed that everyone, having ramped up on the current technologies, would be spending nights and weekends ramping up on whatever might end up as the "next current technologies". That really hasn't happened though. 
33:52:Where do we go from here? Perhaps it is functional programming, but I don't have any strong opinions here. Rather, I would share that where we ought to go from here is towards /smarter/ programming with /powerful/ languages. IT is generally lacking in both of those things today; and addressing them would save time /and/ money.

File: 2009-07-27-3613.org
5:37:#+TAGS: Ide, Learning, Objective-C, Programming Language, Xcode

File: 2009-07-26-3584.org
5:32:#+TAGS: Learning, Objective-C, Programming Language
12:202:I feel like the author did something of a "rush job" to get these screencasts out. The downside is that the time you spent watching them could have been better spent doing something else, like reading Programming in Objective-C 2.0 for example.

File: 2009-07-29-3626.org
5:22:#+TAGS: Ikarus, PLT, Programming Language, Scheme

File: 2009-07-31-3636.org
5:22:#+TAGS: Eiffel, Ide, Programming Language

File: 2009-08-01-3644.org
5:25:#+TAGS: Chez, Learning, Programming Language, Scheme, Teaching

File: 2009-08-11-3671.org
5:14:#+TAGS: Fun, Programming

File: 2009-08-25-3703.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-08-25-3709.org
5:19:#+TAGS: Learning, Programming Language, Scheme, Teaching
22:51:  Part of our development environment is a visual programming language similar to [[http://scratch.mit.edu/][Scratch]]. The visual language provides a drag-and-drop interface for assembling procedures and event handlers that manipulate high-level components of Android-based phones.
30:23:  We parse the visual programming language into an S-expression intermediate language, which is a domain-specific language expressed as a set of Scheme macros, along with a Scheme runtime library.

File: 2009-08-27-3724.org
5:17:#+TAGS: Ikarus, Programming Language, Scheme

File: 2009-08-25-3719.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-08-27-3733.org
5:9:#+TAGS: Programming Language, Scheme
41:124:  In a nutshell [the "small"] language should remain true to the language design precepts found in the RnRS introduction ("Programming languages should be designed not by piling feature on top of feature, ...").

File: 2009-08-31-3748.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-08-31-3753.org
5:22:#+TAGS: Common Lisp, Programming Language, Scheme

File: 2009-08-31-3765.org
5:24:#+TAGS: Learning, PLT, Programming Language, Scheme, Teaching

File: 2009-08-31-3770.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-08-31-3774.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Scheme

File: 2009-08-31-3778.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-08-31-3787.org
5:19:#+TAGS: Learning, Programming Language, Scheme, Teaching

File: 2009-09-02-3812.org
5:17:#+TAGS: Career, Programming, philosophy
12:384:Whatever the case, isn't there a question lurking at the back of their mind as they read the resume of a developer with 12 years of Java experience, a question something like "If it takes 4 years to get really good at Java, what did you do with the other 8 years?". While the 4 year number is totally arbitrary and there is a lot more that goes into being a good developer than just programming; /I/ have wondered things like this about both myself and other developers. In that amount of time you could easily attain a degree in some related, interesting field that would add a lot to your repertoire of expertise.
16:225:Perhaps it is too expensive to justify in terms of dollars or time? I guess I am just left wondering, what have I really been learning? Has it been of any significance? Has it been challenging and truly beneficial? How many programming languages do I need to learn until I have gotten the 80% that I really need? 

File: 2009-09-04-3831.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-09-04-3836.org
5:9:#+TAGS: Programming Language, Scheme, philosophy

File: 2009-09-05-3857.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-09-08-3872.org
5:15:#+TAGS: Chez, Programming Language, Scheme

File: 2009-09-07-3868.org
5:14:#+TAGS: PLT, Programming Language, Scheme, philosophy

File: 2009-09-13-3900.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-09-15-3905.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-09-17-3908.org
5:15:#+TAGS: Java, Programming Language

File: 2009-09-18-3911.org
5:26:#+TAGS: Doxygen, MATLAB, Programming Language

File: 2009-09-21-3919.org
5:19:#+TAGS: Ide, PLT, Programming Language, Scheme

File: 2009-09-20-3915.org
5:19:#+TAGS: Business, Programming, Statistics, applied statistics, philosophy

File: 2009-09-21-3926.org
5:19:#+TAGS: Learning, Programming, Teaching
8:184:A few months ago [[http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html][this]] last-in-a-thread-of-posts generated a lot of buzz. In it, the creator of the Python programming language shared his views about how [[http://en.wikipedia.org/wiki/Tail_recursion][tail-recursion]] does not belong in Python. The only problem with the post(s) was that he, admittedly, did not understand tail-recursion. This course of events, the blog posts, comments, and aftermath, were interesting in what they revealed:

File: 2009-09-23-3971.org
10:32:(via [[http://www.reddit.com/r/programming/comments/9mgvv/someone_at_the_powerball_lotto_has_a_sense_of/][reddit]])

File: 2009-09-25-3983.org
5:17:#+TAGS: Ikarus, Programming Language, Scheme

File: 2009-09-25-3987.org
5:9:#+TAGS: Programming, Programming Language, Scheme, philosophy

File: 2009-09-25-3992.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-09-26-4002.org
5:9:#+TAGS: Programming

File: 2009-09-26-4013.org
5:15:#+TAGS: N900, Programming
10:32:(via [[http://www.reddit.com/r/programming/comments/9h461/how_to_write_a_reddit_client_for_the_nokia_n900/][reddit]]).

File: 2009-09-26-4008.org
5:9:#+TAGS: Programming Language, Scheme
14:32:(via [[http://www.reddit.com/r/programming/comments/9hbx8/armpit_scheme_interpreter_for_arm_microcontrollers/][reddit]])

File: 2009-10-04-4017.org
5:14:#+TAGS: Ide, Programming

File: 2009-10-04-4028.org
5:9:#+TAGS: Programming Language, Scheme
10:32:(via [[http://www.reddit.com/r/programming/comments/9fhev/why_scheme_rocks_pdf/][reddit]])

File: 2009-10-05-4033.org
5:19:#+TAGS: Learning, Programming Language, Smalltalk, Teaching
6:18:#+TITLE: Scratch Programming
9:49:  [[http://scratch.mit.edu/][Scratch]] is a new programming language that makes it easy to create your own interactive stories, animations, games, music, and art -- and share your creations on the web.

File: 2009-10-20-4040.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-10-24-4051.org
5:9:#+TAGS: Programming Language, Scheme, iPhone

File: 2009-10-27-4056.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-11-01-4085.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-11-01-4100.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-11-01-4094.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-11-01-4115.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-11-01-4106.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-11-03-4129.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-11-21-4161.org
5:9:#+TAGS: Programming, philosophy

File: 2009-12-07-4175.org
5:14:#+TAGS: PLT, Programming Language, Scheme
6:19:#+TITLE: Paralell Programming with PLT Scheme

File: 2009-12-16-4183.org
6:32:#+TITLE: A Favorite Passage on Programming
8:224:Like [[http://calculist.blogspot.com/2009/12/computer-science-education-week.html][Geoff]], I find the following passage from [[http://www.htdp.org/][HTDP]] to be one of the most inspirational pieces I have ever read about programming. 
13:7:  Yet programming is more than just a vocational skill. Indeed, good programming is a fun activity, a creative outlet, and a way to express abstract ideas in a tangible form. And designing programs teaches a variety of skills that are important in all kinds of professions: critical reading, analytical thinking, creative synthesis, and attention to detail.
19:568:On one hand, program design teaches the same analytical skills as mathematics. But, unlike mathematics, working with programs is an active approach to learning. Interacting with software provides immediate feedback and thus leads to exploration, experimentation, and self-evaluation. Furthermore, designing programs produces useful and fun things, which vastly increases the sense of accomplishment when compared to drill exercises in mathematics. On the other hand, program design teaches the same analytical reading and writing skills as English. Even the smallest programming tasks are formulated as word problems. Without critical reading skills, a student cannot design programs that match the specification. Conversely, good program design methods force a student to articulate thoughts about programs in proper English.

File: 2009-12-20-4189.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-12-20-4197.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-12-21-4211.org
5:19:#+TAGS: Paralell, Programming
6:44:#+TITLE: A Pattern Repository for Parallel Programming
8:95:[[http://parlab.eecs.berkeley.edu/wiki/patterns/patterns][Here]] is a repository for parallel programming patterns.
10:56:(via [[http://surana.wordpress.com/2009/12/18/parallel-programming-patterns/][pinku]])

File: 2009-12-21-4205.org
5:15:#+TAGS: Lisp, Programming, Programming Language, Scheme, philosophy

File: 2009-12-22-4220.org
5:9:#+TAGS: Programming Language, Scheme

File: 2009-12-23-4223.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2009-12-23-4229.org
5:9:#+TAGS: Programming Language, Scheme
10:32:(via [[http://www.reddit.com/r/programming/comments/9ck6t/scheme_is_love/][digg]])

File: 2009-12-23-4239.org
5:9:#+TAGS: Programming Language, Scheme
8:21:jao posted [[http://programming-musings.org/2009/12/23/scheme-lectures-mostly/][here]]on a big list of Scheme related videos that came up in the PLT discussion list.

File: 2009-12-23-4263.org
5:15:#+TAGS: BitC, Programming Language
6:19:#+TITLE: The BitC Programming Language
13:25:  BitC is a new systems programming language. It seeks to combine the flexibility, safety, and richness of Standard ML or Haskell with the low-level expressiveness of C.

File: 2009-12-23-4271.org
5:9:#+TAGS: Programming, Programming Language, philosophy
13:37:-- [[http://en.wikipedia.org/wiki/S_programming_language][John Chambers]]

File: 2009-12-23-4267.org
5:9:#+TAGS: Programming Language, Scheme
9:333:  [[http://www.kenrawlings.com/pages/Tachy][Tachy]] is a Scheme-like (R5RS is the template, but not the goal) language that is being developed in C# for the .NET framework and is made available as Open Source (BSD License). The current implementation is an interpreter, and a compiler is planned. The primary focus for Tachy is for programming language learning & experimentation, and an attempt has been made to keep the code as small(currently under 1000 lines) and straightforward as possible.

File: 2009-12-29-4281.org
5:17:#+TAGS: Gambit, Programming Language, Scheme

File: 2009-12-29-4275.org
5:15:#+TAGS: Caml, Programming Language

File: 2010-01-02-4315.org
5:27:#+TAGS: Linux, ML, OCaml, Programming Language, Software

File: 2010-01-05-4353.org
5:30:#+TAGS: Learning, ML, OCaml, Programming Language

File: 2010-01-05-4359.org
5:16:#+TAGS: OCaml, Programming Language

File: 2010-01-06-4371.org
5:9:#+TAGS: Programming Language, Rebol

File: 2010-01-16-4385.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-01-16-4389.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-01-18-4451.org
5:9:#+TAGS: Programming

File: 2010-01-18-4433.org
5:9:#+TAGS: Programming Language, Scheme

File: 2010-01-22-4461.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-01-23-4482.org
5:9:#+TAGS: Programming Language, Scheme

File: 2010-01-30-4495.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Scheme

File: 2010-01-30-4498.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2010-01-31-4508.org
5:25:#+TAGS: Clojure, LaTeX, Programming Language, TeX

File: 2010-01-31-4512.org
5:29:#+TAGS: Clojure, Fun, Java, Programming Language

File: 2010-02-04-4523.org
5:36:#+TAGS: Clojure, Emacs, Ide, Lisp, Programming Language, Scheme

File: 2010-02-04-4535.org
5:23:#+TAGS: Build, Maven, Programming

File: 2010-02-10-4539.org
5:29:#+TAGS: DrScheme, Ide, PLT, Programming Language, Scheme

File: 2010-03-01-4559.org
5:30:#+TAGS: C++, Cygwin, Ikarus, Programming Language, Scheme

File: 2010-02-27-4553.org
65:14:- Design and programming methodologies

File: 2010-03-01-4567.org
5:17:#+TAGS: Ikarus, Programming Language, Scheme

File: 2010-03-16-4590.org
5:21:#+TAGS: Guile, Lua, Programming Language, Scheme

File: 2010-03-16-4584.org
5:14:#+TAGS: MIT, Programming Language, Scheme

File: 2010-03-19-4597.org
18:49:I love Mark's take on cool; from motorcycles to programming languages, it still makes sense. It makes me think about how great it is to be alive, living, in the present. It is a gift.

File: 2010-03-28-4611.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-03-28-4623.org
5:18:#+TAGS: Chicken, Programming Language, Scheme

File: 2010-03-28-4617.org
5:63:#+TAGS: Computer Science, High Performance Computing, MATLAB, Programming Language

File: 2010-04-03-4636.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-04-03-4646.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-03-4649.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-04-4653.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-04-4660.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-04-4665.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-06-4670.org
5:20:#+TAGS: Moby, PLT, Programming Language, Scheme

File: 2010-04-07-4676.org
5:50:#+TAGS: API, Distributed Computing, MPI, OpenMP, Programming Language

File: 2010-04-12-4695.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-04-16-4705.org
5:16:#+TAGS: Pharo, Programming Language, Smalltalk

File: 2010-04-24-4726.org
5:17:#+TAGS: Gambit, Programming Language, Scheme

File: 2010-04-26-4730.org
5:20:#+TAGS: ML, OCaml, Programming Language
8:46:In [[http://t-a-w.blogspot.com/2006/05/ocaml-programming-best-practice.html][this]]post I read that:

File: 2010-05-08-4735.org
5:21:#+TAGS: Emacs, Ide, Programming

File: 2010-05-08-4739.org
5:20:#+TAGS: ML, OCaml, Programming Language
6:30:#+TITLE: Functional reactive programming in OCaml with froc

File: 2010-05-08-4754.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-05-08-4758.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-05-08-4762.org
5:20:#+TAGS: ML, OCaml, Programming Language
6:22:#+TITLE: Unix System programming in OCaml
9:92:  It is my pleasure to announce that Xavier Leroy and Didier Rémy's course on Unix system programming in Objective Caml is now available in english at this address :

File: 2010-05-08-4769.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-05-08-4773.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-05-27-4797.org
5:32:#+TAGS: Emacs, Ide, ML, OCaml, Programming, Programming Language

File: 2010-05-25-4788.org
5:32:#+TAGS: Emacs, Ide, ML, OCaml, Programming, Programming Language

File: 2010-05-30-4822.org
5:21:#+TAGS: Functional, Programming Language

File: 2010-05-30-4811.org
5:14:#+TAGS: PLT, Programming Language, Scheme
6:18:#+TITLE: Genetic programming in PLT Scheme
9:43:  If anyone here is interested in genetic programming, the PLT implementation of my Push/PushGP system, for which several of you provided help over the last few weeks, is posted at [[http://hampshire.edu/lspector/schush.ss%20][http://hampshire.edu/lspector/schush.ss]]

File: 2010-05-30-4816.org
5:14:#+TAGS: PLT, Programming Language, Scheme
6:23:#+TITLE: Erlang style programming in PLT
9:56:  [[http://weblambda.blogspot.com/2009/09/erlang-style-programming-in-plt.html][bzlib/thread]]provides additional concurrency constructs by building on top of PLT Scheme's concurrency primitives to help simplify programming in message passing style that Erlang has helped popularized.

File: 2010-05-30-4826.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-30-4831.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-30-4842.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-30-4836.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-31-4847.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-31-4880.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-31-4889.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-31-4884.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-05-31-4893.org
5:14:#+TAGS: PLT, Programming Language, Scheme

File: 2010-06-01-4900.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-06-08-4908.org
5:9:#+TAGS: Programming Language, Scheme
12:319: "[[http://www.google.com/url?sa=t&source=web&cd=1&ved=0CBIQFjAA&url=http%3A%2F%2Fwww.ccs.neu.edu%2Fscheme%2Fpubs%2Fscheme2009-fb.pdf&ei=62EOTIXnOoSBlAfC3dVs&usg=AFQjCNGAorH_uOZF2OfAPhpWkSesCmID7A][Keyword and Optional Arguments in PLT Scheme]]". Matthew Flatt and Eli Barzilay. 2009 Workshop on Scheme and Functional Programming.

File: 2010-06-10-4913.org
5:15:#+TAGS: Lisp, Programming Language

File: 2010-08-21-5037.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-08-25-5073.org
5:14:#+TAGS: PLT, Programming Language, Racket, Scheme

File: 2010-08-21-5041.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-08-30-5105.org
5:14:#+TAGS: PLT, Programming Language, Racket, Scheme, Utility

File: 2010-09-01-5120.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-09-07-5153.org
5:21:#+TAGS: Functional, Programming Language
6:56:#+TITLE: Intel presentation about their new functional programming language
13:26:  For five years Intel's Programming Systems Lab (PSL) has been collaborating with an external partner on a new functional programming language designed for productivity on many-core processors. While the language is not yet public, this talk outlines motivations behind the language and describes our experiences in implementing it using a variety of functional languages. The reference interpreter is written in Haskell and compiled with GHC while PSL's performance implementation is written in SML and compiled with Mlton. We have also generated Scheme code compiled with PLT Scheme as part of a prototyping effort.

File: 2010-09-11-5208.org
5:20:#+TAGS: ML, OCaml, Programming Language, iPhone

File: 2010-09-13-5238.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-09-19-5255.org
5:15:#+TAGS: Lisp, Programming Language, Racket, Scheme

File: 2010-09-22-5298.org
5:15:#+TAGS: Lisp, Programming Language, Racket, Scheme

File: 2010-09-25-5302.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-09-25-5310.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2010-10-27-5350.org
5:18:#+TAGS: Dolphin, Programming Language, Smalltalk

File: 2010-11-21-5368.org
5:19:#+TAGS: Learning, Programming Language, Scheme

File: 2010-11-06-5360.org
5:20:#+TAGS: ML, OCaml, Programming Language, Scheme

File: 2010-11-22-5373.org
5:9:#+TAGS: Programming Language, Scheme

File: 2010-11-22-5380.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2010-12-16-5396.org
5:27:#+TAGS: Javascript, Lisp, Programming Language

File: 2010-12-18-5402.org
5:23:#+TAGS: Eiffel, OLPC, Programming Language, XO

File: 2010-12-19-5406.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2010-12-19-5418.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2010-12-19-5410.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2010-12-19-5414.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2010-12-20-5461.org
5:19:#+TAGS: Learning, Programming, Scheme, Teaching
10:32:(via [[http://www.reddit.com/r/programming/comments/eojl9/the_little_schemer_still_a_valuable_resource/][reddit]])

File: 2011-01-02-5481.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2011-01-02-5485.org
5:22:#+TAGS: Eiffel, Fun, Programming Language

File: 2011-01-30-5550.org
5:9:#+TAGS: Programming Language, R-Project, Statistics, applied statistics

File: 2011-02-17-5579.org
5:16:#+TAGS: Guile, Programming Language, Scheme

File: 2011-02-27-5583.org
5:34:#+TAGS: Linux, Operating System, Programming Language, Racket, Scheme, Ubuntu

File: 2011-03-13-5624.org
5:43:#+TAGS: MATLAB, Octave, Operating System, Programming Language, Windows

File: 2011-04-01-5642.org
5:15:#+TAGS: Lisp, Programming Language, elisp

File: 2011-05-15-5656.org
5:14:#+TAGS: PLT, Programming Language, Racket, Scheme

File: 2011-05-22-5668.org
5:31:#+TAGS: Io, Operating System, Programming Language, Windows

File: 2011-06-01-5683.org
5:17:#+TAGS: Eiffel, Programming Language

File: 2011-06-01-5688.org
5:15:#+TAGS: Lisp, Programming Language, Racket, Scheme

File: 2011-06-01-5707.org
5:20:#+TAGS: ML, OCaml, Programming Language
6:10:#+TITLE: Programming PIC microcontrollers with Objective Caml

File: 2011-06-05-5711.org
5:17:#+TAGS: Gambit, Programming Language, Scheme

File: 2011-06-27-5836.org
5:20:#+TAGS: DSL, Lisp, Programming Language, Racket, Scheme
19:143:If that is your cup of tea, you might have a look at this super awesome tutorial on implementing a brainf*ck interpreter on top of the Racket programming language:

File: 2011-07-18-5857.org
5:21:#+TAGS: Emacs, Ide, Programming Language, elisp
11:35:Emacs has had asynchronous socket programming facilities for some time and a few years ago asynchronous TCP server sockets were introduced. I couldn't quite believe that no one had written an asynchronous webserver with EmacsLISP before. So now I have.

File: 2011-07-26-5862.org
5:20:#+TAGS: JDK, Java, Programming Language

File: 2011-08-14-5884.org
5:9:#+TAGS: Programming Language, Scheme

File: 2011-08-14-5891.org
5:24:#+TAGS: C Sharp, Lisp, Programming Language, Racket, Scheme

File: 2011-08-27-5900.org
5:15:#+TAGS: Lisp, Programming Language, Scheme, iPhone

File: 2011-09-18-5930.org
5:14:#+TAGS: Lua, Programming, Programming Language, Science
9:215:  GSL Shell is an interactive interface that gives access to the [[http://www.gnu.org/software/gsl/manual/gsl-ref.html][GSL numerical routines]] by using [[http://www.lua.org/][Lua]], an easy to learn and powerful programming language. With GSL Shell you can access very easily the functions provided by the GSL library without the need of writing and compile a stand-alone C application. In addition the power and expressivity of the Lua language make easy to develop and tests complex procedures to treat your data and use effectively the GSL routines. You will be also able to create plot in real-time by using the powerful builtin graphical module.

File: 2011-09-28-5940.org
5:15:#+TAGS: Java, Programming Language, Scheme
10:32:(via [[http://www.reddit.com/r/programming/comments/kqixo/sicp_for_kindle/][Reddit]])

File: 2011-10-03-5956.org
5:29:#+TAGS: Database, Learning, Programming, Teaching

File: 2011-10-03-5965.org
5:9:#+TAGS: Programming Language, Scheme

File: 2011-10-23-5977.org
5:9:#+TAGS: Programming Language, Scheme

File: 2011-10-23-5982.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2011-11-06-6014.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2011-11-14-6031.org
5:23:#+TAGS: Learning, ML, Programming Language, SML, Teaching
24:69:The reason is that I've never learned a statically typed functional programming language, I feel weak on recursive data type definitions, and I am curious about compiler and interpreter construction. So, I'm looking for a way to learn about all 3 at once.

File: 2011-11-10-6027.org
5:27:#+TAGS: Javascript, Lisp, Programming Language, Scheme

File: 2011-11-26-6044.org
5:9:#+TAGS: Programming Language, Scheme

File: 2011-12-11-6056.org
5:40:#+TAGS: Distributed Computing, Gambit, Programming Language, Scheme

File: 2011-12-18-6066.org
5:15:#+TAGS: OS X, Programming Language, R7RS, Scheme, iOS

File: 2011-12-18-6077.org
5:18:#+TAGS: Android, Programming Language, Scheme

File: 2011-12-21-6090.org
5:31:#+TAGS: DrRacket, Emacs, Ide, Programming Language, Racket

File: 2012-01-15-6113.org
5:18:#+TAGS: Dolphin, Programming Language, Smalltalk

File: 2012-01-15-6108.org
5:25:#+TAGS: Dolphin, Linux, Programming Language, Smalltalk

File: 2012-01-18-6123.org
5:19:#+TAGS: Learning, Programming, Python, Scheme, Teaching, philosophy
9:425:  Zombie-like, 6.001 rises from the dead to threaten students again. Unlike a zombie, though, it's moving quite a bit faster than it did the first time. Like the original, don't walk into the class expecting that it will teach you Scheme; instead, it attempts to teach thought patterns for computer science, and the structure and interpretation of computer programs. Three projects will be assigned and graded. Prereq: some programming experience; high confusion threshold.

File: 2012-01-23-6135.org
5:15:#+TAGS: Java, Programming Language, Scheme
9:126:  [[http://nexj-scheme.org/][NexJ]] Scheme is an open source project providing an efficient and powerful interpreter for the programming language Scheme that executes in a Java virtual machine.

File: 2012-03-14-6198.org
5:25:#+TAGS: MATLAB, Octave, Programming Language

File: 2012-03-14-6204.org
5:25:#+TAGS: MATLAB, Octave, Programming Language

File: 2012-03-14-6209.org
5:30:#+TAGS: Firebug, Javascript, Programming Language, Selenium, XPath

File: 2012-04-08-6240.org
5:9:#+TAGS: Programming Language, Python

File: 2012-04-13-6251.org
5:9:#+TAGS: Programming Language, Python

File: 2012-06-14-6270.org
5:9:#+TAGS: Programming, philosophy

File: 2012-08-02-6289.org
5:19:#+TAGS: Learning, Programming, Teaching, philosophy

File: 2012-08-27-6309.org
5:23:#+TAGS: Java, MATLAB, Programming Language

File: 2012-09-22-6344.org
5:42:#+TAGS: Fun, Functional, Learning, Lisp, Programming, Programming Language, Racket, Scheme, mathematics
8:66:Understanding the Y-Combinator seems to be one of the functional programming right-of-passage things, and for good reason, it is fun. Not all of the articles out there spoke to me, so I took notes while coding it up in a way that I understood it.

File: 2012-09-22-6355.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-09-23-6362.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-09-24-6390.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-09-25-6399.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-09-27-6408.org
5:34:#+TAGS: Emacs, Guile, Ide, Lisp, Programming, Programming Language, Racket, Scheme, elisp

File: 2012-10-01-6430.org
5:24:#+TAGS: Clojure, Lisp, Programming, Programming Language

File: 2012-11-04-6533.org
5:42:#+TAGS: Fun, Functional, Learning, Lisp, Programming, Programming Language, Racket, Scheme

File: 2012-11-04-6527.org
5:42:#+TAGS: Fun, Functional, Learning, Lisp, Programming, Programming Language, Racket, Scheme

File: 2012-11-12-6568.org
5:15:#+TAGS: Lisp, Programming, Programming Language, Racket, Scheme, X Windows

File: 2012-11-16-6586.org
8:793:Over the last few weeks nights and weekends I've played around with Jess studying up on rules engines and expert systems. The approach of focusing on the limited reality defined by the facts and rules in the universe of the engine along with letting go of control of sequencing are surprisingly freeing. Memories of event loops, OOAD, OOP, multimethods, state machines, horribly hand-written code, and event handlers all come to mind. It is fascinating to see how well some things can be simplified. It makes me wonder why we ever choose one approach over another. Supposedly we always use the best tool for the job; but in practice most of us learn one halfway decent approach ("tool") once and end up using it forever. I suppose that is a human trait and not unique to problem solving with programming languages.

File: 2012-11-18-6595.org
5:15:#+TAGS: Lisp, Programming, Programming Language, Scheme

File: 2012-11-21-6601.org
5:25:#+TAGS: Ide, Lisp, PLT, Programming Language, Racket, Scheme

File: 2012-11-23-6629.org
5:25:#+TAGS: Ide, Lisp, PLT, Programming Language, Racket, Scheme

File: 2012-12-03-6750.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-12-03-6757.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2012-12-27-6843.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2012-12-27-6846.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2013-01-04-6884.org
10:47:01. Opportunity to learn declarative style of programming: [[https://en.wikipedia.org/wiki/Declarative_programming]]
38:26:15. It is a full fledged programming language in and of itself, a first class member of the JVM, and capable of generating code that it may then execute at full-speed.
48:57:20. It will forever change the way that you think about programming.

File: 2013-01-08-6931.org
166:97:For fun I worked through the CLIPS 6.30 beta literature specifically the user's guide and basic programming guide. These are so, so helpful; they are aimed and programmers who have never worked in an expert system before. It goes in a lot more depth what you may do in CLIPS, and consequently JESS, than JESS does.

File: 2013-01-16-6951.org
5:20:#+TAGS: Lisp, PLT, Programming Language, Racket, Scheme, Utility

File: 2013-01-12-6939.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-01-20-6961.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Racket, Scheme

File: 2013-01-22-6970.org
5:32:#+TAGS: Computation, Learning, Programming, Teaching, philosophy

File: 2013-02-01-7006.org
5:30:#+TAGS: Firebug, Javascript, Programming Language, Selenium, XPath

File: 2013-02-02-7010.org
5:22:#+TAGS: Guile, Lisp, Programming Language, Scheme

File: 2013-02-03-7013.org
62:32:      -  Constraint and Linear Programming problems. Schedule and resource allocation, complex configurations. supply chain, staffing, and vehicle routing. Constraint satisfaction problems, what: define entire solution space and the constraints on the variables and then optimize in the found solutions. Nice examples and tech. JSR-331. Staffing example. 
167:89:-  [[http://intellifest.org/html/archive_2011/presentations/101_JacobFeldman__ConstraintProgramming101.pdf][~ Jacob Feldman: Constraint Programming 101
171:35:   -  Nice overview of constraint programming.

File: 2013-02-21-7218.org
5:20:#+TAGS: Lisp, PLT, Programming Language, Racket, Scheme

File: 2013-03-17-7338.org
10:380:The problem with it is that it makes it harder for people who want to learn more about the topic by wasting their time and presenting the topic as very, very shallow and simplistic. It makes rules-engines very, very easy to blow off as sort of a joke and nothing more than pricey business rules engines. That is sad, too, because rules-engines provide a very nuanced and special programming style all their own that every programmer should at least learn. 
65:50:   -  [[https://en.wikipedia.org/wiki/Constraint_programming][~ Constraint programming
69:51:   -  [[https://en.wikipedia.org/wiki/Declarative_programming][~ Declarative programming
237:46:   -  [[https://en.wikipedia.org/wiki/Linear_programming][~ Linear programming

File: 2013-04-11-7556.org
5:21:#+TAGS: Processing, Programming Language
6:25:#+TITLE: The Processing Programming Language
13:53:  [[http://processing.org/about/][Processing]] is a programming language, development environment, and online community that since 2001 has promoted software literacy within the visual arts. Initially created to serve as a software sketchbook and to teach fundamentals of computer programming within a visual context, Processing quickly developed into a tool for creating finished professional work as well.

File: 2013-04-17-7576.org
5:15:#+TAGS: Lisp, Programming Language, Scheme
9:124:  "[[http://the-concurrent-schemer.github.io/scm-doc/][The Concurrent Schemer]]" (CSCM) is an implementation of the Scheme programming language built on top of the Erlang Virtual Machine.

File: 2013-04-27-7655.org
5:24:#+TAGS: Communication, Programming Language
6:24:#+TITLE: Semi-Literate Programming with Docco
8:129:[[http://jashkenas.github.io/docco/][Docco]] is a documentation generator that is semi-[[https://en.wikipedia.org/wiki/Literate_programming][Literate]] and looks nice. It comes with JavaScript support, and there are clones for other languages.

File: 2013-04-27-7658.org
5:15:#+TAGS: Lisp, Programming Language, elisp

File: 2013-05-04-7748.org
5:33:#+TAGS: Books, Learning, Logic, Programming, mathematics

File: 2013-05-12-7829.org
5:30:#+TAGS: Editor, Emacs, Lisp, Programming Language, elisp

File: 2013-05-13-7832.org
5:15:#+TAGS: Lisp, Programming Language, R7RS, Scheme

File: 2013-05-15-7835.org
5:15:#+TAGS: Lisp, Programming Language, Scheme
10:12:The ISLISP programming language is a member of the Lisp family of programming languages. It attempts to bridge the gap between the various incompatible members of the Lisp family of languages (most notably Common Lisp, Eulisp, LeLisp, and Scheme) by focusing on standardizing those areas of widespread agreement. It is a small language, closer to the size of Scheme than to Common Lisp, for example.

File: 2013-05-20-7875.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2013-05-22-7879.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2013-05-28-7888.org
5:34:#+TAGS: Emacs, Guile, Ide, Lisp, Programming Language, Scheme, elisp

File: 2013-05-30-7901.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
6:42:#+TITLE: Reproducible Research, Literate Programming, and Inter-Language Programming with Babel
9:124:  [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel]] is about letting many different languages work together. Programming languages live in blocks inside natural language Org-mode documents. A piece of data may pass from a table to a Python code block, then maybe move on to an R code block, and finally end up embedded as a value in the middle of a paragraph or possibly pass through a gnuplot code block and end up as a plot embedded in the document.

File: 2013-06-12-7907.org
5:48:#+TAGS: Editor, Emacs, Ide, Learning, Literate Programming, ML, Programming Language, Reproducible research, Research, SML, Standard ML, Teaching

File: 2013-06-22-7912.org
5:15:#+TAGS: Lisp, Programming Language, Scheme

File: 2013-07-06-7920.org
5:23:#+TAGS: Learning, ML, Programming Language, SML
15:45:-  [[https://www.cs.cmu.edu/~rwh/introsml/][Programming in Standard ML]]. Definitive, once you are through, you are done. A wonderful book.
16:134:-  [[http://www.amazon.com/The-Little-MLer-Matthias-Felleisen/dp/026256114X][The Little MLer]]. An introduction to the idea of typed programming not an introduction to SML
17:37:-  [[http://www.amazon.com/Elements-Programming-ML97-Edition-2nd/dp/0137903871][Elements of ML Programming, ML97 Edition (2nd Edition)]].
19:54:-  [[http://www.amazon.com/dp/0133319687][Functional Programming Using Standard Ml.]] A good introduction to the language. Good for beginners.
22:51:-  [[http://www.amazon.com/Applicative-High-Order-Programming-M-L-Perspective/dp/0412392402][Applicative High Order Programming: The Standard M.L.Perspective]]. Excellent for advanced programmers.
23:48:-  [[http://www.amazon.com/Elements-Functional-Programming-International-Computer/dp/0201129159][Elements Of Functional Programming]]. Excellent for intermediate/advanced programmers.
25:39:-  [[http://www.amazon.com/Concurrent-Programming-ML-John-Reppy/dp/0521714729/ref=sr_1_7?s=books&ie=UTF8&qid=1373149124&sr=1-7&keywords=ML+primer][Concurrent Programming in ML]].
27:28:-  [[http://www.amazon.com/Programming-With-Standard-BCS-Practitioner/dp/0137220758][Programming With Standard Ml]]. Good for intermediate programmers.

File: 2013-06-23-7915.org
5:20:#+TAGS: Fun, Lisp, Programming Language, Scheme

File: 2013-07-17-7941.org
5:41:#+TAGS: Angular, Framework, Javascript, Programming Language

File: 2013-08-04-7978.org
5:23:#+TAGS: Books, Logic, Programming, mathematics

File: 2013-08-11-4441.org
5:20:#+TAGS: ML, OCaml, Programming Language
15:27:GODI provides an advanced programming environment for the Objective Caml (O'Caml) language.

File: 2013-08-11-4690.org
5:9:#+TAGS: Programming Language, Scheme

File: 2013-08-11-6944.org
5:20:#+TAGS: Lisp, PLT, Programming Language, Racket, Scheme, Utility

File: 2013-08-12-8006.org
5:20:#+TAGS: ML, OCaml, Programming Language

File: 2013-08-15-8012.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-09-29-8042.org
5:43:#+TAGS: Distributed Computing, Lisp, PLT, Programming Language, Racket, Scheme
6:14:#+TITLE: MPI Programming with Racket

File: 2013-09-02-8029.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language

File: 2013-09-29-8046.org
5:20:#+TAGS: Lisp, PLT, Programming Language, Racket, Scheme

File: 2013-10-10-8074.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-10-12-8083.org
5:13:#+TAGS: ML, Programming Language, SML

File: 2013-10-10-8079.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-10-12-8085.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-10-13-8089.org
5:65:#+TAGS: Artificial Intelligence, CLIPS, Emacs, Ide, Jess, Lisp, Programming, Programming Language, Rules Engine, elisp

File: 2013-10-13-8091.org
5:31:#+TAGS: Emacs, Ide, Lisp, ML, Programming, Programming Language, SML, elisp

File: 2013-10-20-8108.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-10-15-8095.org
59:1:programming, multi-threaded programming GUI programming, and architecture before
60:49:diving into this book. If you grok a functional programming language like 
61:27:Scheme, and a declarative programming language like CLIPS, then you will 

File: 2013-10-20-8105.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2013-10-26-8120.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language

File: 2013-11-02-8125.org
5:132:#+TAGS: Business, Business Intelligence, Computational Science, Computer Science, Data Modeling, Data science, Database, Learning, Programming, R-Project, Statistics, Teaching, mathematics, philosophy

File: 2014-01-08-8135.org
5:17:#+TAGS: Gambit, Programming Language, Scheme

File: 2014-01-12-8140.org
5:15:#+TAGS: Java, Programming Language, Scheme

File: 2014-01-08-8137.org
5:18:#+TAGS: Haskell, Programming Language, Scheme

File: 2014-01-12-8145.org
5:21:#+TAGS: Emacs, Ide, Programming Language

File: 2014-01-12-8143.org
5:21:#+TAGS: Emacs, Ide, Programming Language, Racket, Scheme

File: 2014-01-16-8182.org
5:21:#+TAGS: Emacs, Fun, Programming

File: 2014-01-15-8164.org
5:21:#+TAGS: Gear, Java, Programming Language, Sun

File: 2014-01-16-8169.org
5:21:#+TAGS: Emacs, Ide, Programming

File: 2014-01-23-8204.org
5:27:#+TAGS: Computer Science, Programming, Programming Language, compiler, interpreter, philosophy

File: 2014-01-23-8206.org
26:226:* Programmers may be intrigued to view their medium at a higher-level if they have not before done so. For functional programmers bewitched by "purity", one might consider that there is a lot more to remove from a particular programming language to really make it "pure" as long as it remains befuddled by my long list. As I read the list, my romance with logic and its foundations in computer science is deeply reinvigorated. 

File: 2014-02-02-8224.org
5:28:#+TAGS: Emacs, Emacs Lisp, Programming Language, Utility

File: 2014-02-25-8243.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2014-02-26-8245.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2014-03-01-8251.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2014-03-01-8264.org
5:83:#+TAGS: Business Intelligence, Computational Science, Computer Science, Learning, Programming, Reproducible research, Teaching, abacus, data modelling, mathematics, philosophy, soroban, spirituality

File: 2014-03-13-8284.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
8:27:Wanting to learn literate programming in org-mode I figured that my Emacs configuration would be the simplest place to start. In that regard I was right, it just took a lot more work then I had expected, and that is OK. It was a non-trivial effort and I learned a lot. In my mind, the door is now wide open to utilize literate programming; the org-mode team has truly unleashed an amazing gift to the world and it may take the world some time to really understand and appreciate it.

File: 2014-03-16-8296.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-03-19-8321.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2014-03-23-8342.org
5:40:#+TAGS: Books, Computer Science, Lisp, Programming, Programming Language, Scheme, compiler, interpreter

File: 2014-03-23-8350.org
5:9:#+TAGS: Programming Language, Scheme

File: 2014-03-23-8354.org
5:48:#+TAGS: Eclipse, Ide, IntelliJ, Java, Literate Programming

File: 2014-03-24-8356.org
5:50:#+TAGS: Babel, Emacs, Ide, LaTeX, Lisp, Literate Programming, Programming Language, R, Reproducible research, elisp, org-mode

File: 2014-03-24-8358.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-03-24-8377.org
5:53:#+TAGS: Artificial Intelligence, CLIPS, Emacs, Ide, Programming, Programming Language, Reproducible research, Rules Engine, elisp, org-mode
8:87:It would be nice to have a lovingly supported CLIPS mode along with org-mode literate programming (babel) and a clear legal pedigree.

File: 2014-03-24-8380.org
5:132:#+TAGS: Business, Business Intelligence, Computational Science, Computer Science, Data Modeling, Data science, Database, Learning, Programming, R-Project, Statistics, Teaching, mathematics, philosophy

File: 2014-03-25-8385.org
5:132:#+TAGS: Business, Business Intelligence, Computational Science, Computer Science, Data Modeling, Data science, Database, Learning, Programming, R-Project, Statistics, mathematics, philosophy

File: 2014-03-27-8391.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
8:353:The Emacs configuration for normal operations on my system has loads of useful and powerful packages loaded. Sometimes they interfere with the normal operation of org-html-export-to-*, though. The simplest way to address those issues is to generate two confirmation files: one for full-blown Emacs use and another just for doing exports. With literate programming in org-mode it is totally simple to do. It looks like this:

File: 2014-03-25-8388.org
5:21:#+TAGS: Emacs Lisp, Programming Language, Scheme

File: 2014-03-31-8403.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-03-31-8418.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-03-31-8420.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-03-31-8422.org
5:83:#+TAGS: Business Intelligence, Computational Science, Computer Science, Learning, Programming, Reproducible research, Teaching, abacus, data modelling, mathematics, philosophy, soroban, spirituality

File: 2014-04-12-8445.org
5:36:#+TAGS: Emacs Lisp, Lisp, Literate Programming, Programming Language, Reproducible research, org-mode

File: 2014-04-12-8448.org
5:36:#+TAGS: Emacs Lisp, Lisp, Literate Programming, Programming Language, Reproducible research, org-mode

File: 2014-05-01-8508.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-05-01-8511.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
6:66:#+TITLE: Parallel code execution in Emacs with org-mode literate-programming

File: 2014-05-01-8515.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-06-8525.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-05-08-8533.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-09-8538.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-13-8554.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-05-15-8571.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-17-8586.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-17-8589.org
5:33:#+TAGS: Emacs, Emacs Lisp, Ide, Programming

File: 2014-05-18-8592.org
5:14:#+TAGS: Fun, Programming Language, interpreter
10:13:Most modern programming languages do not consider white space characters (spaces, tabs and newlines) syntax, ignoring them, as if they weren't there. We consider this to be a gross injustice to these perfectly friendly members of the character set. Should they be ignored, just because they are invisible? Whitespace is a language that seeks to redress the balance. Any non whitespace characters are ignored; only spaces, tabs and newlines are considered syntax.

File: 2014-06-04-8638.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2014-05-31-8621.org
5:9:#+TAGS: Programming Language, Scheme

File: 2014-05-31-8610.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy
6:55:#+TITLE: Lightweight multiple modes for semi-literate programming

File: 2014-06-05-8665.org
5:9:#+TAGS: Programming, Programming Language, Scheme, mathematics, philosophy

File: 2014-06-07-8667.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2014-06-07-8670.org
5:9:#+TAGS: Programming, Programming Language, Scheme

File: 2014-06-07-8674.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
10:91:Studying and mastering each of them brings you further down the path of org-mode literate programming mastery.

File: 2014-06-09-8676.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming

File: 2014-06-09-8678.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming

File: 2014-06-10-8688.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp
6:26:#+TITLE: You know that a programming language has succeeded when people say that it  is horrible... Emacs Lisp
8:10:Most new programming languages start out with the zest and zeal that everyone feels for things that are "fresh and new". Eventually, like in every relationship, the "infatuation phase" ends and "real love" must begin or the relationship will move on. 
10:261:What prefaces the latter phase is a period of acceptance of all the flaws of that language. Actually, it is a fine thing, as long as you don't dwell on them (you have your flaws, too). It is a sign of growth and maturity. That is why whenever you see it for a programming language, then you know that it is "the real deal", that a lot of people love it, and that it is worth your time.

File: 2014-06-10-8696.org
5:45:#+TAGS: Emacs, HTML, Ide, Javascript, Lisp, Programming, Programming Language, elisp

File: 2014-06-10-8691.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming

File: 2014-06-10-8685.org
5:18:#+TAGS: Literate Programming
6:25:#+TITLE: Finally a good programming interview question
8:10:Like all programming interview questions, [[http://programmingpraxis.com/2014/06/10/balanced-delimiters-2/][this one]] is contrived... and it is also succinct, precise, pleasant, and delightful. 

File: 2014-06-11-8698.org
5:9:#+TAGS: Programming, Programming Language, compiler, interpreter

File: 2014-06-13-8700.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming
6:35:#+TITLE: A tiny org-mode literate programming Makefile

File: 2014-06-15-8714.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-06-15-8719.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-06-17-8721.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy
32:60:mandatory to successfully achieve your goals with literate programming.

File: 2014-06-17-8723.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-20-8745.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp
8:97:[[https://en.wikipedia.org/wiki/Pattern_matching][Pattern matching]] is available in a bunch of programming languages. For some reason, I never thought to look for a library in Emacs Lisp for it, and it is here in [[http://www.emacswiki.org/emacs/PatternMatching][pcase]]. 
10:428:There is this weird thing that happens when you start using Emacs Lisp. Unlike other languages where you start learning it for "its great features", most of us only learned it to configure Emacs. Because of this, our brains kind of turn off when it comes to using the language. Or perhaps instead, our expectations change. They are just, lower, and it makes our minds slower. That is why you see so many posts like "if you are programming Emacs Lisp then you must...".

File: 2014-06-21-8748.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-21-8750.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-22-8759.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-22-8764.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-22-8769.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-06-23-8771.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-24-8773.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-06-26-8777.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-26-8779.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-26-8782.org
5:50:#+TAGS: Babel, Emacs, Ide, LaTeX, Lisp, Literate Programming, Programming Language, Reproducible research, TeX, elisp, org-mode

File: 2014-06-27-8785.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
8:21:org-mode's literate programming (Babel) functionality is amazing. The limitation in my case is me, not the tool. The power and abstraction just aren't something that you think about it for a document. While I suppose that is the whole point of LP, it does just take time for it to sink in, and experience. That said, [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-06/msg00894.html][this example]] is nice. 

File: 2014-06-27-8790.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-06-27-8792.org
5:50:#+TAGS: Babel, Emacs, Ide, LaTeX, Lisp, Literate Programming, Programming Language, Reproducible research, TeX, elisp, org-mode

File: 2014-07-02-8798.org
5:53:#+TAGS: Data science, Emacs, Emacs Lisp, Ide, Lisp, Programming, Statistics

File: 2014-07-03-8808.org
695:89:-  Notes: [[http://ergoemacs.org/emacs/emacs_unicode_fonts.html][Best Unicode Fonts for Programming]]
701:68:-  [[http://www.slant.co/topics/67/viewpoints/4/~what-are-the-best-programming-fonts~dejavu-sans-mono][What are the best programming fonts?]]
707:86:-  [[http://www.codeproject.com/Articles/30040/Font-Survey-42-of-the-Best-Monospaced-Programming][Font Survey: 42 of the Best Monospaced Programming Fonts]]

File: 2014-07-09-8823.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-07-09-8827.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-07-12-8830.org
5:14:#+TAGS: C++, Programming, Programming Language, Utility
31:10:Internet programming (MIME, CGI);
33:16:Server (batch) programming;

File: 2014-07-12-8832.org
5:76:#+TAGS: .NET, Artificial Intelligence, C++, CLIPS, Emacs, Ide, Jess, Lisp, Programming, Programming Language, Rules Engine, Visual Studio, elisp

File: 2014-07-12-8834.org
5:91:#+TAGS: .NET, Android, Artificial Intelligence, C++, CLIPS, Emacs, Ide, Java, Jess, Lisp, Programming, Programming Language, Rules Engine, Visual Studio, elisp

File: 2014-07-14-8837.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-07-14-8841.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-07-26-8857.org
5:28:#+TAGS: Go Lang, Learning, Programming, Programming Language, Teaching

File: 2014-07-31-8862.org
5:14:#+TAGS: Art, Programming, compiler, interpreter, virtual machine
8:71:[[https://en.wikipedia.org/wiki/Malbolge][Malbolge]] looks like a fun programming language.

File: 2014-08-16-8890.org
6:12:#+TITLE: R programming for those coming from other languages
8:63:[[http://www.johndcook.com/R_language_for_programmers.html][R programming for those coming from other languages]] is a nice overview for most mainstream programmers coming to R today. It would serve you well to have a R terminal open while you read it to play with things so that they make sense.

File: 2014-08-22-8912.org
9:91:  FWIW, I have started a `prog-proc-mode', which is supposed to be a minor mode used in a programming mode and that makesthe link to an underlying comint mode.

File: 2014-08-18-8903.org
664:120:-  Read [[http://adv-r.had.co.nz/Exceptions-Debugging.html][Advanced R on Debugging, condition handling, and defensive programming]]
702:20:      -  Defensive programming: introduction
816:17:   -  Defensive programming

File: 2014-08-30-8993.org
9:344:  Strings are not glamorous, high-profile components of R, but they do play a big role in many data cleaning and preparations tasks. R provides a solid set of string operations, but because they have grown organically over time, they can be inconsistent and a little hard to learn. Additionally, they lag behind the string operations in other programming languages, so that some things that are easy to do in languages like Ruby or Python are rather hard to do in R. The [[https://github.com/hadley/stringr][stringr]] package aims to remedy these problems by providing a clean, modern interface to common string operations.

File: 2014-08-31-9008.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-09-09-9124.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-09-09-9125.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-09-11-9131.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-09-12-9133.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-09-18-9153.org
5:18:#+TAGS: Literate Programming, Programming Language, R-Project, Reproducible research

File: 2014-09-25-9177.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-09-28-9200.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-10-13-9246.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, R-Project, Reproducible research, elisp, org-mode

File: 2014-10-29-9275.org
5:19:#+TAGS: Learning, Programming, R-Project, Teaching

File: 2014-10-29-9277.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-11-11-9306.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-11-18-9316.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-11-20-9319.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2014-11-27-9325.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy
39:806:The song, that sweet celestial song, is sometimes more difficult for people to hear. The honey-kissed embrace of one's love feels different than a song, and different than laughing at a joke, but they are all the creative act. Gardening, selling, collecting, tending... they are all part of the creative act that makes us again be born human. We always seem to focus on the configuration of those actions (time, space, causality, and identity), the build of those tools, necessary to perform the creative act. With time and patience, we will see the true nature of things. Part of the path is indeed attaining mastery. Mastery over ourselves, mostly, by some way that is gentle and kind. That action, that attempt, for me, has partially culminated in the aggregation of a lifetime of mastery of tools and programming languages and ideas and studies and training and collaboration and mystery and magic and laughing, in this birth, in the artifact called ALEC, and ALEC can only be expressed, for me, for now, with Emacs.

File: 2014-11-30-9346.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy
49:10:Literate programming here is done with Org-Mode. It is an insanely delightful and hyper productivity enhancing tool. It is so simple that the 99% will dismiss it as a "markup language", and the 1% will soon find that the painful-gap between exploration, implementation, and reflection can now be totally and completely removed *regardless* of the implementation artifact that you use to perform these three critical tasks.

File: 2014-11-30-9352.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2014-12-09-9357.org
5:19:#+TAGS: Hardware, Programming, Software

File: 2014-12-14-9365.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-19-9370.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-22-9373.org
5:9:#+TAGS: Programming, Programming Language, forth
9:51:FORTH is a [[https://en.wikipedia.org/wiki/Forth_(programming_language)][programming language]] with a lot of both [[http://www.forth.org/][interested]] and interesting users and implementers. Unbeknownst to you, your anti-lock brake controllers and fuel-injectors could be running by FORTH, and even if they aren't, surely other critical parts of your vehicle are running on it, or diagnosed and maintained with it, or *both*.
17:106:The curious thing about the language is that its manifestation in this reality demonstrated how a single programming language could be both highly perform-ant *and* highly expressive. This is rare and uncommon. Today, no language achieve this feat. To consider that FORTH achieved it on limited computers, a long time ago, adds further wonder and respect for this delightful language. If you haven't even taken at least a single look at it, then you should grab your copy of whatever you call /hardware systems/, along with the latest copy of [[https://www.gnu.org/software/gforth/][gforth]], to write /hello world/ and play with the stack a little bit. It is /interesting/ how much expressivity and *power* you can get out of a /little/ computer system using this neat language. The language isn't the most important thing though; it is the people.
41:255:Bruce told me about it all of the time. It was the most fun job that he ever had. Anyone knows that with any job you have ups and downs. It is especially hard though when your first job is your best one. Fortunately he was investing in and exploring non-programming related forms of employment and expression. The neatest stuff was the [[https://en.wikipedia.org/wiki/Encaustic_painting][encaustic painting.]]

File: 2014-12-26-9385.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-27-9388.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-27-9395.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-28-9397.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2014-12-30-9401.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-01-09-9419.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming
6:48:#+TITLE: The Lenticular Text Style of Literate Programming
9:160:[[https://www.mail-archive.com/gnu-emacs-sources@gnu.org/msg02522.html][This announcement]] is pretty exciting because it reveals a new-to-me take on literate programming. The style is to store a single file as a source, and render disparate parts of that file in different buffers in a mode correct for the content.

File: 2015-01-18-9443.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-01-17-9436.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, org-modeLiterate Programming

File: 2015-01-25-9454.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-02-01-9476.org
5:17:#+TAGS: DevOps, Programming, Reproducible research

File: 2015-02-02-9481.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-02-02-9487.org
5:71:#+TAGS: DevOps, Internet Information Services, Learning, PluralSight, Programming

File: 2015-02-02-9489.org
5:48:#+TAGS: .NET, DevOps, PluralSight, Powershell, Programming, Programming Language

File: 2015-02-02-9491.org
5:37:#+TAGS: .NET, C Sharp, PluralSight, Programming, Programming Language

File: 2015-02-02-9499.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-05-9504.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-02-05-9507.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-02-05-9509.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-02-05-9513.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-02-05-9519.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-02-09-9537.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-10-9541.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-12-9562.org
5:30:#+TAGS: Android, Java, Lisp, Programming, Programming Language, Scheme

File: 2015-02-15-9571.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2015-02-13-9567.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-02-16-9573.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-02-17-9581.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-19-9608.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-23-9612.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-02-28-9622.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-02-28-9624.org
5:67:#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language

File: 2015-03-10-9636.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-04-04-9673.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-03-29-9653.org
5:55:#+TAGS: .NET, C Sharp, Entity Framework, PluralSight, Programming, Programming Language

File: 2015-04-14-9705.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-05-05-9729.org
5:9:#+TAGS: Programming, Typography

File: 2015-05-10-9732.org
5:9:#+TAGS: Programming

File: 2015-05-25-9756.org
5:16:#+TAGS: Emacs, Programming

File: 2015-06-10-9774.org
5:16:#+TAGS: Music, Programming Language, forth

File: 2015-06-13-9801.org
5:27:#+TAGS: Emacs, Ide, Java, Programming Language, VIM, elisp

File: 2015-06-21-9808.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming, Programming Language, elisp

File: 2015-07-03-9817.org
5:32:#+TAGS: Emacs, Fun, Ide, Lisp, Programming, creativity, elisp, philosophy

File: 2015-07-05-9823.org
5:9:#+TAGS: Programming Language, Scheme, forth

File: 2015-07-05-9819.org
59:30:The relationship between the programming language and hardware is tightly woven. Most of us don't consider this today because we own machines that spend 99% of their time idle. Looking at languages and inexpensive hardware is a real treat because you start caring real quick! Quickly, too, I ended up on [[http://armpit.sourceforge.net/][Armpit Scheme]].
75:72:One of my best friends Bruce had loved to share with me his delight in programming FORTH. Scheme was my enlightenment tool, and his was FORTH. We would spend hours talking about both of them. Our conversations went something like this: "Me: In Scheme I explored X, and it was fun!" and then "Bruce: I explored that very idea in FORTH and this is how I did it and it was fun!". FORTH was built to run on small CPUs. That got me learning more about FORTH.

File: 2015-07-11-9847.org
5:32:#+TAGS: Emacs, Fun, Ide, Lisp, Programming, creativity, elisp, philosophy

File: 2015-07-11-9858.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2015-07-13-9862.org
5:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode

File: 2015-07-18-9869.org
5:47:#+TAGS: Babel, Emacs, Hardware, Ide, Literate Programming, Programming Language, Software, TI-99/4A, forth, org-mode
6:27:#+TITLE: Vintage Computer Programming Book Market About To Explode!
17:197:The best way to learn Forth is interactively. How do you do it with [[http://orgmode.org/worg/org-contrib/babel/][Org Mode]], though? Can we have the same features you would expect with any other programming language even though it is running inside of an emulator? There must be an easy way to run at the command line, redirect input and output, or maybe telnet into the machine.
33:164:They are simpler. They are a great place to start. There is tons of great literature out there already. Now add Emacs and Org-Mode to the mix to practice Literate Programming.
41:87:It seems like there is a huge opportunity for great new books about old computers and programming languages. Export to LaTeX and publish, and there you go. Very fun and very cool.

File: 2015-07-18-9876.org
5:30:#+TAGS: Applied mathematics, Programming, Programming Language, R-Project, S-PLUS, applied statistics

File: 2015-07-18-9878.org
5:30:#+TAGS: Applied mathematics, Programming, Programming Language, SAS, WPS, applied statistics

File: 2015-07-18-9883.org
5:46:#+TAGS: Applied mathematics, MATLAB, Octave, Programming, Programming Language, applied statistics
9:146:  [[https://en.wikipedia.org/wiki/MATLAB][MATLAB]] (matrix laboratory) is a multi-paradigm numerical computing environment and fourth-generation programming language.
17:76:  [[https://en.wikipedia.org/wiki/GNU_Octave][GNU Octave]] is a high-level programming language, primarily intended for numerical computations. It provides a command-line interface for solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB.

File: 2015-07-18-9880.org
5:30:#+TAGS: Applied mathematics, Programming, Programming Language, R-Project, S-PLUS, applied statistics
9:38:  [[https://en.wikipedia.org/wiki/R_(programming_language)][R]] is a programming language and software environment for statistical computing and graphics.
17:35:  R is an implementation of the S programming language combined with lexical scoping semantics inspired by Scheme.
25:38:  [[https://en.wikipedia.org/wiki/S_(programming_language)][S]] is a statistical programming language developed primarily by John Chambers and (in earlier versions) Rick Becker and Allan Wilks of Bell Laboratories.
33:92:  [[https://en.wikipedia.org/wiki/S-PLUS][S-PLUS]] is a commercial implementation of the S programming language sold by TIBCO Software Inc.

File: 2015-07-18-9885.org
5:30:#+TAGS: Applied mathematics, Programming, Programming Language, SAS, WPS, applied statistics
17:41:  [[https://en.wikipedia.org/wiki/World_Programming_System][The World Programming System]], also known as WPS, is a software product developed by a company called World Programming. WPS allows users to create, edit and run programs written in the language of SAS.

File: 2015-07-18-9887.org
5:30:#+TAGS: Applied mathematics, Programming, Programming Language, R-Project, S-PLUS, applied statistics

File: 2015-08-02-9893.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-05-9903.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-03-9897.org
5:32:#+TAGS: Emacs, Fun, Ide, Lisp, Programming, creativity, elisp, philosophy

File: 2015-08-12-9909.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy
8:114:Always name all of your Source-Blocks and uniquely ID Headlines in Org-Mode. It is the only way to make Literate Programming pleasant and predictable. At the very least you will understand what is happening during tangling.

File: 2015-08-18-9914.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-18-9918.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-29-9926.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-19-9922.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-29-9928.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-29-9931.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-29-9952.org
8:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-08-29-9946.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-09-07-9982.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
11:60:    Schulte. *All* of my experience with Org-Mode Literate Programming is
12:87:    working on my [[https://github.com/grettke/help][Emacs configuration for Literate Programming]]. Wanting to

File: 2015-09-07-9985.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-09-10-9987.org
7:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
54:54:      Bring it's text anywhere, in the document or a programming language.
77:58:  - Struggling with best way to master Org-Mode Literate Programming. It is
85:9:    any programming language is possible with Babel, between languages, with

File: 2015-09-12-10002.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-09-12-10004.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, philosophy

File: 2015-09-13-10008.org
6:30:#+TAGS: Applied mathematics, Programming, Programming Language, SAS, WPS, applied statistics

File: 2015-09-13-10010.org
6:30:#+TAGS: Applied mathematics, Programming, Programming Language, SAS, WPS, applied statistics

File: 2015-09-20-10021.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2015-09-26-10039.org
6:9:#+TAGS: Programming Language, C Language
14:9:- The C programming language
17:29:* https://www.reddit.com/r/cprogramming/.rss
18:15:- Old'scool C Programming Reddit
19:6:- r/cprogramming
21:30:* https://www.reddit.com/r/C_Programming/.rss
23:7:- r/C_Programming

File: 2016-02-10.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-02-16.org
6:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, elisp, org-mode, Philosophy

File: 2016-02-25.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-04-06-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-04-09-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, Keyboard, MechanicalKeyboard

File: 2016-04-16-01.org
12:47:something new about what you want. It is like programming with Elisp!

File: 2016-04-16-04.org
96:48:      hardware. Hardware lets you utilize your programming on any OS.
110:15:        begin programming it immediately. This make for an easy configuration

File: 2016-04-24-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-04-23-07.org
6:20:#+TAGS: APL, Array programming, Programming Language, Philosophy

File: 2016-04-29-01.org
6:30:#+TAGS: Editor, Emacs, Lisp, Programming Language, elisp

File: 2016-05-01-02.org
6:25:#+TAGS: Chez, Learning, Programming Language, Scheme, Teaching

File: 2016-05-03-01.org
6:21:#+TAGS: Emacs, Ide, Programming Language, elisp

File: 2016-05-11-04.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-11-06.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-11-05.org
6:20:#+TAGS: APL, Array programming, Programming Language
7:15:#+TITLE: APL (programming language)
9:42:The [[https://en.wikipedia.org/wiki/APL_(programming_language)][Wikipedia Page on APL]] is fascinating.

File: 2016-05-12-01.org
6:20:#+TAGS: APL, Array programming, Programming Language, Emacs, Lisp, Scheme
36:58:    one might begin to acquire some of the dimensions in programming that we
39:57:    natural languages so precious to us. That aspect of programming was one
43:43:  - "It was clear in those languages that programming was really an exercise
73:1:programming step-by-step must someday, though we don’t know how, reach the
75:67:insofar as they involve giving prescriptions on how to do things. Programming
79:51:happens, we are going to be dissatisfied with the programming languages we
97:17:    can express programming ideas to other people in the language in which
112:63:I’m dealing with. I find that a very precious property of a programming
117:5:  - Programming APL is fun, charming, and pleasant
119:36:  - Only one way to do things make programming *dull*
163:41:    ALGOL, indeed, I think you know all programming languages. You don’t know

File: 2016-05-15-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-17-02.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-16-01.org
6:20:#+TAGS: APL, Array programming, Programming Language
9:16:"You need this programming language..."
17:70:own conclusion. This is unheard of today in the popular landscape of programming
20:59:"Do you know what you value? Do you know what you want in programming

File: 2016-05-18-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-18-03.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-20-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-05-22-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-06-04-02.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-06-04-03.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-06-05-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-06-12-04.org
6:9:#+TAGS: Programming, Investment
9:37:[[https://socketloop.com/blogs/from-programming-to-investing-all-in-the-mind][One programmer's]] journey from MechWarrior, to Programmer, to Investor.

File: 2016-06-12-05.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
9:120:Org-Mode [[http://orgmode.org/manual/Working-With-Source-Code.html][code blocks]] are verbose and lovable for literate programming. Rasmus

File: 2016-06-17-03.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-06-22-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-06-25-01.org
6:27:#+TAGS: Emacs, Ide, Lisp, Programming Language, Reproducible research, elisp

File: 2016-06-25-03.org
7:10:#+TITLE: Programming Projects in C for Students of Engineering, Science, and Mathematics
9:36:[[http://bookstore.siam.org/cs13/][Programming Projects in C for Students of Engineering, Science, and

File: 2016-06-29-01.org
6:22:#+TAGS: AMPL, Linear programming, Constraint Programming, Artificial Intelligence, Knowledge Engineering, Rules Engine
9:185:[[https://en.wikipedia.org/wiki/AMPL][AMPL]] is a [[https://en.wikipedia.org/wiki/Algebraic_modeling_language][Algebraic modeling language]] for [[https://en.wikipedia.org/wiki/Linear_programming][Linear programming]] that supports [[https://en.wikipedia.org/wiki/Constraint_programming][Constraint programming]].

File: 2016-07-06-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-07-06-02.org
6:16:#+TAGS: Linear programming, Constraint Programming, Artificial Intelligence, Knowledge Engineering, Rules Engine

File: 2016-07-06-03.org
6:16:#+TAGS: Linear programming, Constraint Programming, Artificial Intelligence, Knowledge Engineering, Rules Engine

File: 2016-07-06-04.org
6:16:#+TAGS: Linear programming, Constraint Programming, Artificial Intelligence, Knowledge Engineering, Rules Engine

File: 2016-07-07-05.org
6:18:#+TAGS: Literate Programming, Programming Language, R-Project, Reproducible research

File: 2016-07-23-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-07-30-01.org
6:9:#+TAGS: Programming Language, Smalltalk

File: 2016-07-31-03.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-07-31-04.org
6:22:#+TAGS: AMPL, Linear programming, Constraint Programming, Artificial Intelligence, Knowledge Engineering, Rules Engine

File: 2016-08-11-01.org
6:9:#+TAGS: Programming, Typography, Security, Unicode

File: 2016-08-11-02.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-08-10-02.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-08-11-03.org
10:38:implementing a useful and expressive programming environment under drastically

File: 2016-08-20-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-08-17-01.org
4:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
131:12:  Literate Programming's =tangle= and =weave= business? Why should she look at the

File: 2016-08-21-04.org
6:15:#+TAGS: Lisp, Programming Language, Scheme, Emacs, Ide

File: 2016-08-30-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-08-27-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
16:50:Org-mode buffers. It turns conventional literate-programming upside-down in
17:30:that the default mode is the programming-mode, and special action has to be
26:19:Thus org-mode and programming-mode are just two different views on the
28:48:between these two views. When switching from a programming-mode to org-mode,
30:42:When switching back from org-mode to the programming-mode, the process is
35:11:'literate PROGRAMMING' than 'LITERATE programming', it is often more
36:25:convenient to work in a programming-mode and switch to org-mode once in a

File: 2016-08-30-02.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-09-03-01.org
6:61:#+TAGS: Unicode, Writing, Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
34:7:    - Programming language

File: 2016-09-19-01.org
6:61:#+TAGS: Unicode, Writing, Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode, Mac, OS X

File: 2016-09-28-02.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-09-24-01.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-09-28-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2016-10-03-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
7:79:#+TITLE: The Fifteen Questions That You Must Answer In Your Org Mode Literate Programming Configuration
39:37:surprises by your Org-Mode Literate Programming system.

File: 2016-10-06-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-10-12-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-11-03-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2016-11-08-01.org
13:53:AI is flexible. Working in it feels more to me like programming than
16:61:one built in JavaScript interpreter, I am not talking about programming here.
17:34:Instead the similarities between programming and illustrating are that

File: 2016-12-01-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2017-01-21-01.org
5:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-02-02-01.org
6:20:#+TAGS: APL, Array programming, Programming Language

File: 2017-02-15-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-02-08-01.org
6:46:#+TAGS: Yoga, philosophy, Health, Happiness, Programming Language, Shell

File: 2017-03-11-01.org
6:53:#+TAGS: Hardware, Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-04-14-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-04-16-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-04-23-01.org
4:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-05-04-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-05-04-02.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-05-07-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
15:1:programming):

File: 2017-05-10-01.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode

File: 2017-05-10-03.org
6:43:#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
29:44:libraries for managing buffers, a powerful programming language Emacs Lisp and

File: 2017-05-07-01.html
239:1:programming):
1807 matches
1028 files contained matches
1975 files searched
2092712 bytes searched
7.473431 seconds

Ag finished at Wed May 10 19:17:58
