#+BLOG: wisdomandwonder
#+POSTID: 10680
#+ORG2BLOG:
#+DATE: [2017-08-18 Fri 18:47]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article
#+TAGS: Programming Language, Go Lang, GBEN
#+TITLE: (Go Lang) Structs (GBEN)

[[https://gobyexample.com/structs][Go by Example]]
* Example
- It has it
#+HTML: <!--more-->
#+NAME: org_gcr_2017-08-18_mara_900BEAAF-59EE-4365-B326-7975EED5AB3D
#+BEGIN_SRC go :results output
package main
import "fmt"
// Go’s structs are typed collections of fields. They’re useful for grouping
// data together to form records.
// This person struct type has name and age fields.
type person struct {
  name string
  age  int
}

func main() {
  // This syntax creates a new struct.
  fmt.Println(person{"Bob", 20})
  // You can name the fields when initializing a struct.
  fmt.Println(person{name: "Alice", age: 30})
  // Omitted fields will be zero-valued.
  fmt.Println(person{name: "Fred"})
  // An & prefix yields a pointer to the struct.
  fmt.Println(&person{name: "Ann", age: 40})
  // Access struct fields with a dot.
  s := person{name: "Sean", age: 50}
  fmt.Println(s.name)
  // You can also use dots with struct pointers - the pointers are automatically dereferenced.
  sp := &s
  fmt.Println(sp.age)
  // Structs are mutable.
  sp.age = 51
  fmt.Println(sp.age)
}
#+END_SRC

#+RESULTS: org_gcr_2017-08-18_mara_900BEAAF-59EE-4365-B326-7975EED5AB3D
#+BEGIN_EXAMPLE
{Bob 20}
{Alice 30}
{Fred 0}
&{Ann 40}
Sean
50
51
#+END_EXAMPLE

[[https://www.wisdomandwonder.com/article/10651/go-lang-go-by-example-notes-gben][Attribution]]
