#+DATE: [2016-08-17 Wed 20:15]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article
#+TAGS: Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
#+TITLE: Why To Use Org-Mode's ID, CUSTOM_ID, and NAME

The following are my notes about why and how I started using =ID,= =CUSTOM_ID=, and
=NAME= with [[https://github.com/grettke/help][HELP]] in chronological order.

They are accurate where they can be and recollections where they can't.

Originally I wanted to publish this as separate posts, but it doesn't make
sense to me separately, so here goes.

Please notify me of errors, issues, and improvements where you can!

#+HTML: <!--more-->

* Automatically Perform Actions Upon Specific Headlines

When I set up [[https://github.com/grettke/home/blob/master/TC3F.org][TC3F]], I manually exported it to =ASCII= in case anyone wanted to
read it. Same goes for [[https://github.com/grettke/home/blob/master/ALEC.org][ALEC]]. Although I figured that virtually no one read
either of the weaved documents, it seemed like a wasted opportunity not trying
out all of them so I kept it in the back of my mind wondering where might be a
good opportunity. When I refactored =ALEC= into [[https://github.com/grettke/help][HELP]] that opportunity came;
suddenly in addition to the document itself I also had two more documents that
I cared about *a lot*: the [[https://github.com/grettke/help/blob/master/README.md][README]] and the [[https://github.com/grettke/help/blob/master/STYLEGUIDE.md][STYLEGUIDE]].

The =README= contains the minimal steps to get =HELP= up and running. When I set
up a new box, /I/ use it. Even when I automate most of the process, I /refer/ to
it; otherwise I just wouldn't remember.

The =STYLEGUIDE= contains every decision I consciously made about writing this
document. It ain't rocket science, but it is mine and I can't remember all of
it so I wrote it down. One of the most frequently used reminders that I keep
coming back to in there is how choose between formatting =code= and =verbatim=...
that one /still/ needs refinement because I break that rule all the time lol.
Even as I write this document, I'm glad to see that I at least /noted/ that it is
important to always set a unique =ID= for every =Headline= (more later).

That makes *six weavings (exports)*, way too many to do manually because it is
tedious and time consuming. Really, it is. The folks on the Org-Mode mailing
list (link excluded because all of my links are to gmame which no longer
exists) showed me how to go somewhere and do something so I pieced together
the following to automate all of the weaving of =HELP=:

#+NAME: 7F835528-B720-430E-8B14-190A4BA9FD0B
#+BEGIN_SRC emacs-lisp
(defun help/org-weave-subtree-gfm (id file)
  "Export the subtree with ID to FILE in gfm."
  (interactive)
  (help/save-all-file-buffers)
  (save-excursion
    (let ((hidx (org-find-property "ID" id)))
      (when hidx
        (goto-char hidx)
        (org-export-to-file 'gfm file nil t nil)))))

(defun help/org-weave-readme ()
  (interactive)
  (help/org-weave-subtree-gfm
   "README"
   "README.md"))

(defun help/org-weave-style-guide ()
  (interactive)
  (help/org-weave-subtree-gfm
   "STYLEGUIDE"
   "STYLEGUIDE.md"))

(defun help/weave-everything-everywhere ()
  "Export this entire document in configured weavers."
  (interactive)
  (save-excursion
    (org-ascii-export-to-ascii)
    (org-html-export-to-html)
    (org-gfm-export-to-markdown)
    (org-latex-export-to-pdf))
  (help/org-weave-readme)
  (help/org-weave-style-guide))
#+END_SRC

Every few days/weeks/months/years I call =help/weave-everything-everywhere=, go
for a walk, and publish new versions of the documents. It has worked great for
a long time. Going to a Headline with a specific =ID= is my introduction to =ID=
and it has worked great.

#  LocalWords:  Ide elisp README STYLEGUIDE lol weavings gmame

* Easily Share Tangled And Weaved Documents With Non Org-Mode Users

One of the *big scary stories* told about Org-Mode is that it is virtually
impossible to utilize tangled-documents on mixed-teams of Org-Mode-Users and
Non-Org-Mode-Users. Like most stories, when you shine some light on them the
fear disappears instantly. That got me curious about something easier than
doing mixed-development: just sharing. How do you share tangled and weaved
documents in a pleasant way with Non-Org-Mode users (or any users for that
matter actually)? The scary user story here goes something like this:

- David wrote a document in Org-Mode
- He tangled it to an Emacs-Lisp program
- Jennifer read the program and wants to know why it works the way it does,
  one specific line actually
  #+BEGIN_EXAMPLE
;; [[file:Org-Mode_Fundamentals.org::AD42B561-29FA-4652-AD28-692CAD631E62][AD42B561-29FA-4652-AD28-692CAD631E62]]
(help/set-org-babel-default-header-args :comments "noweb")
;; AD42B561-29FA-4652-AD28-692CAD631E62 ends here
  #+END_EXAMPLE
- Jennifer realizes that the program has actually been tangled then so
  obviously: Human sacrifice, dogs and cats living together... mass hysteria!

Hold on. It ain't that bad. It isn't even scary. Here is what really will
happen:

- David wrote a document in Org-Mode
- He tangled it to an Emacs-Lisp program
- Jennifer read the program and wants to know why it works the way it does,
  one specific line actually
  #+BEGIN_EXAMPLE
;; [[file:Org-Mode_Fundamentals.org::AD42B561-29FA-4652-AD28-692CAD631E62][AD42B561-29FA-4652-AD28-692CAD631E62]]
(help/set-org-babel-default-header-args :comments "noweb")
;; AD42B561-29FA-4652-AD28-692CAD631E62 ends here
  #+END_EXAMPLE
- Jennifer realizes that the program has actually been tangled so she pieces
  together what the tangled document is telling her, namely that
  - The source code she is looking at
    - Came from the physical file [[https://github.com/grettke/help/blob/master/.org-mode-fundamentals.emacs.el#L120][Org-Mode_Fundamentals.org]]
      - Holding the =NAME= =AD42B561-29FA-4652-AD28-692CAD631E62=
- To study where the source code came from she simply opens up that Org-Mode
  file and searches for that name. Doesn't this betray the whole point of
  Literate Programming's =tangle= and =weave= business? Why should she look at the
  source code why isn't reading a human-readable document? Excellent point.
- To study the human-readable document for where the source code came from and
  why, she opens up the [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.md][Markdown file]] and searches for
  =49787FC5-CAA7-466B-B742-0F38973E070B= and finds an explanation of what this
  code does. In practice she would probably just read the source code inside
  of Emacs once she switches to Emacs, but /this/ gives her a means of
  leveraging LP before making the switch.

My goal is that *anyone* can make sense of LP documents, *any* of them. It turns
out that it is pretty simple to do so, it just takes a few different settings
to make that happen:

- Configure [[http://orgmode.org/manual/comments.html][:comments]] as =noweb=
- Configure your weaver to include the =ID=
  - Help the reader make sense of the document by displaying it's internal
    properties.
  #+NAME: EB94858A-C299-4F0E-91CA-39ADD9AA73C8
  #+BEGIN_SRC emacs-lisp
(setq org-export-with-properties t)
  #+END_SRC
- Easily jump from comments to the origin source block by opening the tangled
  file in Emacs and changing the mode to =org-mode= and clicking on the link
  - Jennifer searched manually which works really well, too

When you de-mystify Org-Modes literate tangling and weaving you find that it
is /just a plain old program/ like everything else and all of the fear about it
is plain old =FUD=.
* Automatically Allocate ID and NAME
* Outcomes Of This Approach

** Easy Attribution and Researching

Most of the Emacs configuration universe consists of snippets that have been
passed around via the SneakerNet, EmacsWikiNet, and InterNet. That rocks. If
you read my [[https://github.com/grettke/help/blob/master/.emacs.el][.emacs.el]] you will find =Attribution= lines all over the place. I am
not unique here. What I am curious about is how to easily attribute code
across publishing mediums. My config here makes it easy because every single
code snippet has a =UUID= associated with it. Not perfect, but it is a start
because you can use the same =UUID= across source code and human-readable
documents. That is very exciting and is not about enforcing ownership and
totally about making it easy to track down who did what and why just to know,
which is always a big topic for Emacs-Lisp code.

** Easy Iterative Development

[[http://orgmode.org/manual/noweb_002dref.html][noweb-ref]] makes it easy to use a natural iterative coding style in your
Org-Mode document iself. Automatic naming of Headlines and Source Blocks makes
it easy to keep track of what came from where and why.

** Easy Sharing

Easily study all kinds of documents inside Emacs, or out.
