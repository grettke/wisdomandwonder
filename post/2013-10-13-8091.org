#+POSTID: 8091
#+DATE: [2013-10-13 Sun 15:39]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: Article
#+TAGS: Emacs, Ide, Lisp, ML, Programming, Programming Language, SML, elisp
#+TITLE: One Emacs SML Workflow

Being partial to the full-REPL-reboot style of development (ala [[http://docs.racket-lang.org/drracket/][DrRacket]]) for most situations I wanted the same thing in Emacs with sml-mode. The value add is that you know all of your files are saved and that your environment is in a fresh and known state. I came up with this:



#+BEGIN_EXAMPLE
    
(defun gcr/sml-eval-buffer ()
  "Intelligently evaluate a SML buffer."
  (interactive)
  (gcr/save-all-file-buffers)
  (let ((sml-process (get-process "sml")))
    (when sml-process
      (quit-process sml-process)))
  (sleep-for 0.25)
  (let ((sml-buffer (get-buffer "*sml*")))
    (when sml-buffer
      (kill-buffer sml-buffer)))
  (sml-prog-proc-load-file buffer-file-name t))

#+END_EXAMPLE



Only to be delighted (though not surprised) to find yet another nearly identical approach [[http://stackoverflow.com/questions/13667300/how-to-run-sml-nj-program-under-emacs/19341368#19341368][here]] by [[http://stackoverflow.com/users/1949197/wenjun-yan][wenjun.yan]]:



#+BEGIN_EXAMPLE
    
(defun isml ()
  "If sml repl exists, then restart it else create a new repl"
  (interactive)
  (when (get-buffer "*sml*")
    (with-current-buffer "*sml*"
      (when (process-live-p "sml")
        (comint-send-eof)))
    (sleep-for 0.2))
  (sml-run "sml" ""))

#+END_EXAMPLE



My urge to attain Emacs Comint mastery only grows.



