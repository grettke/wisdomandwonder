#+BLOG: wisdomandwonder
#+POSTID: 10677
#+ORG2BLOG:
#+DATE: [2017-08-18 Fri 18:08]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article
#+TAGS: Programming Language, Go Lang, GBEN
#+TITLE: (Go Lang) Closures (GBEN)

[[https://gobyexample.com/closures][Go by Example]]
* Example
- Like in Lisp
- Don't allow recursion against themselves
#+HTML: <!--more-->
#+NAME: org_gcr_2017-08-18_mara_C4CBCD26-CAA5-41FB-8AB6-46A1113711B6
#+BEGIN_SRC go :imports '("fmt") :results output
// Go supports anonymous functions, which can form closures. Anonymous
// functions are useful when you want to define a function inline without
// having to name it. Run code

// This function intSeq returns another function, which we define anonymously
// in the body of intSeq. The returned function closes over the variable i to
// form a closure.
intSeq := func() func() int {
  i := 0
  return func() int {
    i += 1
    return i
  }
}

// We call intSeq, assigning the result (a function) to nextInt. This
// function value captures its own i value, which will be updated each time
// we call nextInt.
nextInt := intSeq()
// See the effect of the closure by calling nextInt a few times.
fmt.Println(nextInt())
fmt.Println(nextInt())
fmt.Println(nextInt())
// To confirm that the state is unique to that particular function, create and test a new one.
newInts := intSeq()
fmt.Println(newInts())
#+END_SRC

#+RESULTS: org_gcr_2017-08-18_mara_C4CBCD26-CAA5-41FB-8AB6-46A1113711B6
#+BEGIN_EXAMPLE
1
2
3
1
#+END_EXAMPLE

[[https://www.wisdomandwonder.com/article/10651/go-lang-go-by-example-notes-gben][Attribution]]
