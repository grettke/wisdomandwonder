#+BLOG: wisdomandwonder
#+POSTID: 10385
#+DATE: [2016-09-03 Sat 11:08]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article, Link
#+TAGS: Unicode, Writing, Babel, Emacs, Ide, Lisp, Literate Programming, Programming Language, Reproducible research, elisp, org-mode
#+TITLE: Best Way To Transliterate Unicode to ASCII?

For creating audio-books I use a text-to-speech engine. One problem is that the
application dies on Unicode text. The documents that I encode are too long to
correct manually so I want it automated. The correction isn't as simple as
removing all Unicode text though because if possible I don't want to lose the
meaning of the character when it is easily converted to ASCII.

#+HTML: <!--more-->

For example here are some transliterations that ought to occur:
- ¢ \rarr cents
- © \rarr copyright
- ™ \rarr trademark
- ∀ \rarr for all
- ♥ \rarr heart
- ∂ \rarr derivative

I'm more concerned with not-breaking the text-to-speech engine but having a
large breadth of transliterations would be nice. With that in mind I started
looking for solutions and whittling them down to choosing one:

- Revision 1
  - PKG/URL
    - Package name
    - Github URL
  - Lang
    - Programming language
  - Str
    - Number of stars
  - Notes
- Revision 2 options. I want well supported and easy to run.
  - #C: Number of committers
  - C: Most recent commit: Hours, Days, Months, Years

| PKG/URL                | Lang   | Str | Notes           | #C | C |
|------------------------+--------+-----+-----------------+----+---|
| [[https://github.com/iki/unidecode][iki/unidecode]]          | Python |  75 | Clone [[https://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/][of]]. [[https://github.com/takluyver/Unidecode][+]]. [[https://github.com/avian2/unidecode][+]]. |  8 | Y |
| [[https://github.com/prakashk/Text-Unidecode][Text-Unidecode]]         | Perl   |   1 | The original.   |  1 | Y |
| [[https://github.com/rainycape/unidecode][rainycape/unidecode]]    | Go     |  12 | NA.             |    |   |
| [[https://github.com/xuender/unidecode][xuender/unidecode]]      | Java   |  35 | NA.             |    |   |
| [[https://github.com/FGRibreau/node-unidecode][node-unidecode]]         | JS     |  70 | Curious.        |    |   |
| [[https://github.com/rich-iannone/UnidecodeR][UnidecodeR]]             | R      |  58 | Good to know!   |    |   |
| [[https://github.com/sindikat/unidecode][sindikat/unidecode]]     | Elisp  |   2 | NA.             |    |   |
| [[https://github.com/alexei/silverstripe-unidecode][silverstripe-unidecode]] | PHP    |   8 | NA.             |    |   |

The Python port looks like the most actively maintained and Python is always a
good choice. [[https://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/][The author's discussion]] of his port is interesting for
programmers. In theory we design system that use Unicode even though we know
that they'll have to inter-operate with ASCII-only systems. In practice it is
usually an afterthought that results in well-hidden bugs and exploits. Kind of
gets you wondering whether or not we would be better off only building
ASCII-only systems today.

Here is how to get it set up with =virtualenv= on OS X and =brew=:

Review [[https://pypi.python.org/pypi/Unidecode][this]] and [[https://webamused.wordpress.com/2011/01/31/building-64-bit-python-python-org-using-ucs-4-on-mac-os-x-10-6-6-snow-leopard/][this]] and verify that you have a Python build with the Unicode
support for "wide" characters. For transliterating Blackboard bold, you need
this.

This code should answer 1114111 (not 65535)

#+NAME: orgmode:gcr:vela:54A7A3DB-81A1-4D79-8411-4B6459FA4E5C
#+BEGIN_SRC python :results output
import sys
print sys.maxunicode
#+END_SRC

#+RESULTS: orgmode:gcr:vela:54A7A3DB-81A1-4D79-8411-4B6459FA4E5C
#+BEGIN_EXAMPLE
65535
#+END_EXAMPLE

This is the wrong Python build. It needs to be =ucs4= instead of =ucs2=. Seems
like a fair number of people use =ucs4= ([[https://codegists.com/code/install-python-2.7-mac/][here]], [[https://codegists.com/code/install-python-2.7.9/][here]], [[http://www.jasonamyers.com/pyenv-importerror-flatnamespace][here]], [[https://github.com/att/rcloud/wiki/Required-Installations-for-running-Python-code-in-RCloud][here]]).

[[https://cffi.readthedocs.io/en/latest/installation.html#linux-and-os-x-ucs2-versus-ucs4][This]] explains common CFFI errors from systems with both =ucs2= and =ucs4=
installatins that are "mixed up":

Here is how you know that there is a problem:

#+BEGIN_QUOTE
This is about getting an ImportError about =_cffi_backend.so= with a message
like =Symbol not found: _PyUnicodeUCS2_AsASCIIString=. This error occurs in
Python 2 as soon as you mix “ucs2” and “ucs4” builds of Python. It means that
you are now running a Python compiled with “ucs4”, but the extension module
=_cffi_backend.so= was compiled by a different Python: one that was running
“ucs2”. (If the opposite problem occurs, you get an error about
=_PyUnicodeUCS4_AsASCIIString= instead.)
#+END_QUOTE

Here is the solution for doing a custom build with a custom CFFI and
virtualenv though [[https://github.com/yyuu/pyenv/issues/257][pyenv is also mentioned]].

#+BEGIN_QUOTE
More generally, the solution that should always work is to download the
sources of CFFI (instead of a prebuilt binary) and make sure that you build it
with the same version of Python than the one that will use it. For example,
with virtualenv:
#+END_QUOTE

#+NAME: orgmode:gcr:vela:B5AB6CB5-D5E3-408A-86F2-A5A60A51C37F
#+BEGIN_SRC python
virtualenv ~/venv
cd ~/path/to/sources/of/cffi
~/venv/bin/python setup.py build --force # forcing a rebuild to make sure
~/venv/bin/python setup.py install
#+END_SRC

#+BEGIN_QUOTE
This will compile and install CFFI in this virtualenv, using the Python from
this virtualenv.
#+END_QUOTE

[[https://medium.com/@pimterry/setting-up-pyenv-on-os-x-with-homebrew-56c7541fd331#.k4hs3zw4b][This]] post explains another approach to get it running.
