#+ORG2BLOG

* Go To The Logical Begin And End Of A Buffer's Content
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-16 Sat 00:31]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Emacs,
:POST_TAGS: emacs
:ID:       o2b:AD61406E-0DB3-46F7-A261-C08DA345E150
:POST_DATE: [2019-03-16 Sat 01:02]
:POSTID:   12181
:END:

The only time that I call ~beginning-of-buffer~ is when I want to visit the file
header, which isn't very often. The rest of the time I only want to go up to
where the code begins, or at least close to it. That is the logical beginning
of the buffer. Another example is going to the beginning of a ~magit-status~
invoked buffer: I've never use the first first 3 lines of it. The logical
start of it is the Untracked file listing. The Beginend package moves your
cursor to the the logical beginning of the buffer content. It also implements a
logical ~end-of-buffer~. It might not sound like much, but it bumps up your user
experience by more than a few notches: it makes the modes do what many of us
are thinking and that is the ultimate feel good experience. Here is an
example:

@@html:<!--more Demonstration Follows-->@@

[[./gif/beginend.gif]]

- [[https://github.com/DamienCassou/beginend][Source Code]]
- [[https://emacs.cafe/emacs/package/2017/08/01/beginend.html][Explanatory Blog Post By Author]]
- [[https://melpa.org/#/beginend][MELPA Package Name]]: ~beginend~

# ./gif/beginend.gif https://www.wisdomandwonder.com/wp-content/uploads/2019/03/beginend.gif
* In Bash—Pass Arguments From Function To Another
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 18:12]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Programming Language,
:POST_TAGS: programming-language, bash,
:ID:       o2b:32C1A2AD-7D4F-4646-9EE6-1DBEA2BBCE2D
:POST_DATE: [2019-03-19 Tue 18:24]
:POSTID:   12234
:END:

When I'm good about using and re-using functions in Bash I /always/ end up
passing arguments through from one function to another. For example:

#+name: Function Passings Arguments To Another Function
#+begin_src shell
function pie {
  open /Applications/Emacs.app --args --debug-init "$@"
}

function pienthm {
  EMACSNOTHEME=t pie --reverse-video "$@"
}
#+end_src

Horrible to admit but I keep forgetting the syntax even are taking copious
notes on the [[https://www.gnu.org/software/bash/manual/][GNU Bash manual]].

BTW: hear, hear to including Bash-isms in every shell script!

* Customizing SyntaxHighlighter Evolved For Code
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 20:10]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Wisdom And Wonder,
:POST_TAGS: wisdom-and-wonder, wordpress,
:ID:       o2b:67089D24-43B8-43F1-BEF9-7BD9C8635C00
:POST_DATE: [2019-03-19 Tue 20:14]
:POSTID:   12247
:END:



[[https://wordpress.org/plugins/syntaxhighlighter/][SyntaxHighlighter Evolved]] is brilliant. Its text is too skinny for my eyes
though. [[http://blog.tawfiq.me/changing-the-font-size-line-height-and-code-box-padding-of-syntaxhighlighter-evolved-plugin/][Here]] is a fix though thank you very much Tawfiq. It is easy to apply
it if you are using [[https://jetpack.com/][Jetpack's]] [[https://jetpack.com/support/custom-css/][Custom CSS]] feature.

@@html:<!--more Custom CSS Follows-->@@

#+name: SyntaxHighlighter Evolved Custom CSS
#+begin_src  css
/* font-size */
.syntaxhighlighter a,
.syntaxhighlighter div,
.syntaxhighlighter code,
.syntaxhighlighter table,
.syntaxhighlighter table td,
.syntaxhighlighter table tr,
.syntaxhighlighter table tbody,
.syntaxhighlighter table thead,
.syntaxhighlighter table caption,
.syntaxhighlighter textarea {
    font-size: 14px !important;
}

/* top and bottom padding in code box */
.syntaxhighlighter {
    padding: 1em 0 !important;
}

/* increase line number and code line height */
.syntaxhighlighter table td.gutter .line {
    padding: 3px 0.5em 3px 1em !important;
}
.syntaxhighlighter table td.code .line {
    padding: 3px 1em !important;
}

#+end_src

* Customizing SyntaxHighlighter Evolved For Undefined Languages
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 21:17]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Wisdom And Wonder,
:POST_TAGS: wisdom-and-wonder, wordpress, emacs, org-mode,
:ID:       o2b:9D4555C9-384E-43AE-B4D1-6BB1398CB31B
:POST_DATE: [2019-03-19 Tue 21:58]
:POSTID:   12266
:END:

SyntaxHighlighter Evolved supports [[https://en.support.wordpress.com/code/posting-source-code/][a lot]] of languages. It would be impossible
to support all of them. Fortunately many languages are similar /enough/ to ones already
supported by it. For example Common Lisp (not supported) is similar enough to
Clojure (supported). Therefore you can alias Common Lisp to use
Clojure's formatter.

@@html:<!--more Here Is How-->@@

1) Log into WordPress,
1) Deactive the plugin
1) Go through the menu system to
1) Plugins, Plugin Editor, SyntaxHilighter Evolved, Select
1) syntaxhighlighter/syntaxhighlighter.php
1) Find the section where brush aliases are defined and add this to the end
   #+name: Add Undefined Language Aliases
   #+begin_src php
   	'clisp'         => 'clojure',
   	'elisp'         => 'clojure',
   	'emacs-lisp'    => 'clojure',
   	'lisp'          => 'clojure',
   	'scheme'        => 'clojure',
   	'sh'            => 'bash',
   	'shell'         => 'bash',
   #+end_src
1) Save the change
1) Activate the plugin

Thank you [[http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html][Chen Bin]] for sharing this!

* VIM Changes Acronym to "VIM Imitates eMacs"
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-21 Thu 07:09]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Emacs,
:POST_TAGS: emacs
:ID:       o2b:3F021C4E-E80A-4DD4-AA13-A91835F0023D
:POST_DATE: [2019-03-21 Thu 07:26]
:POSTID:   12271
:END:

[[https://en.wikipedia.org/wiki/Vi][VI]] is the second editor that I learned. The six commands that I use in it will
always be dear to me. Twenty-five years have passed, I still use the same six
commands. The landscape has changed a lot though: [[https://en.wikipedia.org/wiki/Vim_(text_editor)][VIM]] has taken VI into the
stratosphere.

@@html:<!--more Read more-->@@

My buddy showed me how he uses VIM. It has plugin equivalents that every
Emacser would recognize: multiple cursors, regex style file and command completion, modeline,
tree browser, code-completion, project defintions, most recently used files,
=ag= integration, jump to character,  region expansion, undo history visualization, and kill ring.
Even cooler is that he runs it all in [[https://en.wikipedia.org/wiki/Tmux][Tmux]] so from my perspective he adds even
more to VIM. Even better is the synergy (:P) between VIM and Emacs. All of the
features I listed either started in Emacs or VIM and were duplicated. That is great to see the feature cross pollination.

After demonstrating all of these cool features I remarked:

"So—VIM doesn't stand for VI iMproved any more. Now it stands for VIM Imitates
eMacs, cool!"

A cool icy silence filled the work-space.

I ran ~M-x butterfly~ and we both smiled as VIM and Emacs converge.

* Choosing A Monospace Font: 2019-March
:PROPERTIES:
:BLOG: wisdomandwonder
:DATE: [2019-03-24 Sun 00:19]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Text
:POST_TAGS: Text, Font, Unicode, Editor, Emacs
:POSTID:   12298
:ID:       o2b:868F763D-8024-4EB7-BF6D-A254B77B2419
:POST_DATE: [2019-03-24 Sun 00:20]
:END:

On 2014/07/03 I wrote [[https://www.wisdomandwonder.com/text/8808/how-to-choose-a-font][How To Choose A Font]]. My font choice would get used
mostly in a text editor, a web page, or a printed page. Based on notable
information I ended up choosing [[https://dejavu-fonts.github.io/][DejaVu Sans Mono]]. Five years later I'm still
in love with it.

Right now though I've got important life-tasks that I need to complete, that I
want to avoid. So it seemed like a great time to revisit my font choice.

@@html:<!--more Read on-->@@

** Strategy

Just like five years ago there a lot of choices out there. Too many choices.
It is easier to narrow them down by choosing a monospace font. But there are
still too many to evaluate. Here are more criteria (in addition to the
original) to hopefully make it simpler:

- Lots of momentum behind it: lots of users vouching for it
- Unicode support is huge
- Thoughtful blog posts praise the font
- Zero Cost
- Looks good using the [[https://github.com/martinus/programming-font-test-pattern][programming-font-test-pattern]]. It is the fastest way to review
  a programming font:

#+begin_export html
<pre>
o0O s5S z2Z !|l1Iij {([|})] .,;: ``''"" www
a@#* vVuUwW <>;^°=-~ öÖüÜäÄßµ \/\/ -- == __
the quick brown fox jumps over the lazy dog
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
0123456789 &-+@ for (int i=0; i<=j; ++i) {}
</pre>
#+end_export

From there I'm going to choose five
and dig a little deeper.

** Resources

- Blog Post Source Material
  - [[https://blog.checkio.org/top-10-most-popular-coding-fonts-5f6e65282266][10 most popular coding fonts]], Sep 5, 2017
  - [[https://rsms.me/monaco-inconsolata-and-panic-sans][Monaco, Inconsolata and Panic Sans]], Jun 11, 2007
  - [[https://itnext.io/11-best-programming-fonts-724283a9ed57][11 Best Programming Fonts]], May 15, 2018
  - [[http://www.programmingfonts.com/][programming-fonts-collection]], last commit Jan 13, 2019
  - [[https://opensource.com/article/17/11/how-select-open-source-programming-font][5 open source fonts ideal for programming]], Nov 17, 2017
  - [[https://www.developer-tech.com/news/2018/may/16/10-best-fonts-programming/][The 10 best fonts for programming: A guide]], May 16, 2018

** Reactions

The first five fonts that I added to my list were all related via the DejaVu
Sans lineage so I didn't learn anything new there. However I chose one that
seemed to be the best variant.

The next ten were notably different and I reduced that list down to five.

Here are the contenders:

- [[https://fonts.google.com/specimen/Fira+Mono][Fira Mono]]
- [[https://www.marksimonson.com/fonts/view/anonymous-pro][Anonymous Pro]]
- [[https://adobe-fonts.github.io/source-code-pro/][Source Code Pro]]
- [[https://github.com/source-foundry/Hack][Hack]]
- [[https://dejavu-fonts.github.io/][DejaVu]] (my current favorite)

** Evaluation

The animation changes to the next
font every two seconds. This
provides two good evaluation
approaches. The first is to just
observe the entire body of the text.
Without having to think about it you
will notice how the shape changes
and have a reaction to that. Second,
again without having to think about
it, individual areas will jump out
at you. Focus on them as the video
progresses. Continue to scan for
areas that jump out and watch them
cycle. That will give a better
feel for the fonts. Take your time.

*** Top 5

[[./gif/top5.gif]]

Watch it for a while.

All of them are impressive.

Fira and Anonymous Pro stand out as the most different from my preference (not
very different though). The other three are closer to Deja Vu, and their
documentation already spells that out so no surprise.

*** Top 2

[[./gif/top2.gif]]

I stuck close to Deja Vu, so I only had to choose from three of the top five.

I already liked Deja Vu Sans Mono and so it was cool to find similar but
different enough versions of it (albeit only two but that was enough).
Ultimately I ended up comparing Deja Vu Sans Mono with Hack.

Between them there are not a ton of changes between it and Hack but they are
noticeable. Hack makes the font a little more human to me: it is easier to
read and feels a little warmer and friendlier. Maybe the only noticeable
things are the sort of similarity between "l" and "i", the "0" feels very
different, and the parens are centered. None of them are showstoppers however.

** Decision

Hack is the winner 😄😮.

It is a small but worthwhile change.

Can't wait to see how it pans out for the next five years.

What are your top three programming fonts?

# ./gif/top5.gif https://www.wisdomandwonder.com/wp-content/uploads/2019/03/top5.gif
# ./gif/top2.gif https://www.wisdomandwonder.com/wp-content/uploads/2019/03/top2.gif
