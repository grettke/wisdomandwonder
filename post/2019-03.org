j#+ORG2BLOG

* Go To The Logical Begin And End Of A Buffer's Content
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-16 Sat 00:31]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Emacs,
:POST_TAGS: emacs
:ID:       o2b:AD61406E-0DB3-46F7-A261-C08DA345E150
:POST_DATE: [2019-03-16 Sat 01:02]
:POSTID:   12181
:END:

The only time that I call ~beginning-of-buffer~ is when I want to visit the file
header, which isn't very often. The rest of the time I only want to go up to
where the code begins, or at least close to it. That is the logical beginning
of the buffer. Another example is going to the beginning of a ~magit-status~
invoked buffer: I've never use the first first 3 lines of it. The logical
start of it is the Untracked file listing. The Beginend package moves your
cursor to the the logical beginning of the buffer content. It also implements a
logical ~end-of-buffer~. It might not sound like much, but it bumps up your user
experience by more than a few notches: it makes the modes do what many of us
are thinking and that is the ultimate feel good experience. Here is an
example:

@@html:<!--more Demonstration Follows-->@@

[[./gif/beginend.gif]]

- [[https://github.com/DamienCassou/beginend][Source Code]]
- [[https://emacs.cafe/emacs/package/2017/08/01/beginend.html][Explanatory Blog Post By Author]]
- [[https://melpa.org/#/beginend][MELPA Package Name]]: ~beginend~

# ./gif/beginend.gif https://www.wisdomandwonder.com/wp-content/uploads/2019/03/beginend.gif
* In Bash—Pass Arguments From Function To Another
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 18:12]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Programming Language,
:POST_TAGS: programming-language, bash,
:ID:       o2b:32C1A2AD-7D4F-4646-9EE6-1DBEA2BBCE2D
:POST_DATE: [2019-03-19 Tue 18:24]
:POSTID:   12234
:END:

When I'm good about using and re-using functions in Bash I /always/ end up
passing arguments through from one function to another. For example:

#+name: Function Passings Arguments To Another Function
#+begin_src shell
function pie {
  open /Applications/Emacs.app --args --debug-init "$@"
}

function pienthm {
  EMACSNOTHEME=t pie --reverse-video "$@"
}
#+end_src

Horrible to admit but I keep forgetting the syntax even are taking copious
notes on the [[https://www.gnu.org/software/bash/manual/][GNU Bash manual]].

BTW: hear, hear to including Bash-isms in every shell script!

* Customizing SyntaxHighlighter Evolved For Code
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 20:10]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Wisdom And Wonder,
:POST_TAGS: wisdom-and-wonder, wordpress,
:ID:       o2b:67089D24-43B8-43F1-BEF9-7BD9C8635C00
:POST_DATE: [2019-03-19 Tue 20:14]
:POSTID:   12247
:END:



[[https://wordpress.org/plugins/syntaxhighlighter/][SyntaxHighlighter Evolved]] is brilliant. Its text is too skinny for my eyes
though. [[http://blog.tawfiq.me/changing-the-font-size-line-height-and-code-box-padding-of-syntaxhighlighter-evolved-plugin/][Here]] is a fix though thank you very much Tawfiq. It is easy to apply
it if you are using [[https://jetpack.com/][Jetpack's]] [[https://jetpack.com/support/custom-css/][Custom CSS]] feature.

@@html:<!--more Custom CSS Follows-->@@

#+name: SyntaxHighlighter Evolved Custom CSS
#+begin_src  css
/* font-size */
.syntaxhighlighter a,
.syntaxhighlighter div,
.syntaxhighlighter code,
.syntaxhighlighter table,
.syntaxhighlighter table td,
.syntaxhighlighter table tr,
.syntaxhighlighter table tbody,
.syntaxhighlighter table thead,
.syntaxhighlighter table caption,
.syntaxhighlighter textarea {
    font-size: 14px !important;
}

/* top and bottom padding in code box */
.syntaxhighlighter {
    padding: 1em 0 !important;
}

/* increase line number and code line height */
.syntaxhighlighter table td.gutter .line {
    padding: 3px 0.5em 3px 1em !important;
}
.syntaxhighlighter table td.code .line {
    padding: 3px 1em !important;
}

#+end_src

* Customizing SyntaxHighlighter Evolved For Undefined Languages
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-19 Tue 21:17]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Wisdom And Wonder,
:POST_TAGS: wisdom-and-wonder, wordpress, emacs, org-mode,
:ID:       o2b:9D4555C9-384E-43AE-B4D1-6BB1398CB31B
:POST_DATE: [2019-03-19 Tue 21:58]
:POSTID:   12266
:END:

SyntaxHighlighter Evolved supports [[https://en.support.wordpress.com/code/posting-source-code/][a lot]] of languages. It would be impossible
to support all of them. Fortunately many languages are similar /enough/ to ones already
supported by it. For example Common Lisp (not supported) is similar enough to
Clojure (supported). Therefore you can alias Common Lisp to use
Clojure's formatter.

@@html:<!--more Here Is How-->@@

1) Log into WordPress,
1) Deactive the plugin
1) Go through the menu system to
1) Plugins, Plugin Editor, SyntaxHilighter Evolved, Select
1) syntaxhighlighter/syntaxhighlighter.php
1) Find the section where brush aliases are defined and add this to the end
   #+name: Add Undefined Language Aliases
   #+begin_src php
   	'clisp'         => 'clojure',
   	'elisp'         => 'clojure',
   	'emacs-lisp'    => 'clojure',
   	'lisp'          => 'clojure',
   	'scheme'        => 'clojure',
   	'sh'            => 'bash',
   	'shell'         => 'bash',
   #+end_src
1) Save the change
1) Activate the plugin

Thank you [[http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html][Chen Bin]] for sharing this!

* VIM Changes Acronym to "VIM Imitates eMacs"
:PROPERTIES:
:BLOG:     wisdomandwonder
:DATE: [2019-03-21 Thu 07:09]
:OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
:CATEGORY: Emacs,
:POST_TAGS: emacs
:ID:       o2b:3F021C4E-E80A-4DD4-AA13-A91835F0023D
:POST_DATE: [2019-03-21 Thu 07:26]
:POSTID:   12271
:END:



[[https://en.wikipedia.org/wiki/Vi][VI]] is the second editor that I learned. The six commands that I use in it will
always be dear to me. Twenty-five years have passed, I still use the same six
commands. The landscape has changed a lot though: [[https://en.wikipedia.org/wiki/Vim_(text_editor)][VIM]] has taken VI into the
stratosphere.

@@html:<!--more Read more-->@@

My buddy showed me how he uses VIM. It has plugin equivalents that every
Emacser would recognize: multiple cursors, regex style file and command completion, modeline,
tree browser, code-completion, project defintions, most recently used files,
=ag= integration, jump to character,  region expansion, undo history visualization, and kill ring.
Even cooler is that he runs it all in [[https://en.wikipedia.org/wiki/Tmux][Tmux]] so from my perspective he adds even
more to VIM. Even better is the synergy (:P) between VIM and Emacs. All of the
features I listed either started in Emacs or VIM and were duplicated. That is great to see the feature cross pollination.

After demonstrating all of these cool features I remarked:

"So—VIM doesn't stand for VI iMproved any more. Now it stands for VIM Imitates
eMacs, cool!"

A cool icy silence filled the work-space.

I ran ~M-x butterfly~ and we both smiled as VIM and Emacs converge.

