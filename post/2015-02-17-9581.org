#+POSTID: 9581
#+DATE: [2015-02-17 Tue 21:27]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: Link
#+TAGS: .NET, C Sharp, Entity Framework, Javascript, PluralSight, Programming, Programming Language
#+TITLE: Entity Framework 4.1 - DbContext Data Access

[[http://www.pluralsight.com/courses/ef41-data-access][Entity Framework 4.1 - DbContext Data Access]] covers the DbContext object. It is important. The lecture explains why it is important. It might seem abstract if you haven't touched any of this stuff before. That is OK. You will recall it when you need it.

Personal notes follow.







#+BEGIN_HTML
  <div id="outline-container-sec-1" class="outline-2">
#+END_HTML



** 1 Part 1: DbContext stuff




#+BEGIN_HTML
  <div id="text-1" class="outline-text-2">
#+END_HTML




-  DbContext, DbSet, DbQuery

-  Binding to =State= initates entity tracking by the context

-  Find pulls first from the entity cache, so beware unexpected out of date reads

-  What is up with the EF "check for one result" in every query check?!

-  Local property holds object references for those managed by the context

-  ObservableCollections stay in sync with objects tracked by the context

-  Things just got serious, DynamicProxies for lazy-loading and/or change-tracking

-  Change-tracking is disabled when non-virtual properites are present in a class

-  You can disabled change tracking


   -  Who cares about changes?


      -  DbSet: Find, Local, Remove, Add

      -  DbContext: SaveChanges, GetValidationErrors, Entry

      -  DbChangeTracket: Entries


      


   

-  You might care about auto proxy generation in scenario of repositories that are
used both in the back end, which would want dynamic proxies, and on services,
which would want to return real objects not proxies.

-  Wondered why we want access to the DbEntityEntries and Context. Good2know.

-  Context.Aliases.Load pulls the aliases back, but no their entities

-  You can work with the objects managed by the change tracker without
referencing them by type. You examine them using property names, so you don't
have to worry about types.

-  You may easily stomp on aliases by accidentally "merging" them onto an
existing alias

-  Can do server-wins with a call to =Reload=

-  Arthur Vickers: Using DbContext in EF 4.1 Series





#+BEGIN_HTML
  </div>
#+END_HTML




#+BEGIN_HTML
  </div>
#+END_HTML





#+BEGIN_HTML
  <div id="outline-container-sec-2" class="outline-2">
#+END_HTML



** 2 Part 2: Code First Stuff




#+BEGIN_HTML
  <div id="text-2" class="outline-text-2">
#+END_HTML




-  CF generates a default connection string in absence of one

-  IDatabaseInitializer


   -  If it doesn't exist

   -  If the model changes

   -  Always recreate

   -  Your custom approach


   

-  Red Gate .NET Reflector

-  Watch the Migrations lecture next

-  Database.SetInitializer


   -  Just use existing, don't use 'em


   

-  CLR notation for XML

-  System.Data.Entity.Database has all the stuff in it to work right with it





#+BEGIN_HTML
  </div>
#+END_HTML




#+BEGIN_HTML
  </div>
#+END_HTML






