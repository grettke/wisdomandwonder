#+BLOG: wisdomandwonder
#+POSTID: 10668
#+ORG2BLOG:
#+DATE: [2017-08-15 Tue 19:35]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article
#+TAGS: Programming Language, Go Lang, GBEN
#+TITLE: (Go Lang) Slices (GBEN)

[[https://gobyexample.com/slices][Go by Example]]
* Example
- Typed collections
- Similar declaraction syntax
- Bunch of associated functions

#+NAME: org_gcr_2017-08-15_mara_7620B3AB-9B36-42C5-A219-C0C977A9F540
#+BEGIN_SRC go :imports '("fmt") :results output
 s := make([]string, 3)
fmt.Println("emp:", s)

s[0] = "a"
s[1] = "b"
s[2] = "c"
fmt.Println("set:", s)
fmt.Println("get:", s[2])

fmt.Println("len:", len(s))

s = append(s, "d")
s = append(s, "e", "f")
fmt.Println("apd:", s)

c := make([]string, len(s))
copy(c, s)
fmt.Println("cpy:", c)

l := s[2:5]
fmt.Println("sl1:", l)

l = s[:5]
fmt.Println("sl2:", l)

l = s[2:]
fmt.Println("sl3:", l)

t := []string{"g", "h", "i"}
fmt.Println("dcl:", t)

twoD := make([][]int, 3)
for i := 0; i < 3; i++ {
  innerLen := i + 1
  twoD[i] = make([]int, innerLen)
  for j := 0; j < innerLen; j++ {
    twoD[i][j] = i + j
  }
}
fmt.Println("2d: ", twoD)
#+END_SRC

#+RESULTS: org_gcr_2017-08-15_mara_7620B3AB-9B36-42C5-A219-C0C977A9F540
#+BEGIN_EXAMPLE
emp: [  ]
set: [a b c]
get: c
len: 3
apd: [a b c d e f]
cpy: [a b c d e f]
sl1: [c d e]
sl2: [a b c d e]
sl3: [c d e f]
dcl: [g h i]
2d:  [[0] [1 2] [2 3 4]]
#+END_EXAMPLE

[[https://www.wisdomandwonder.com/article/10651/go-lang-go-by-example-notes-gben][Attribution]]
