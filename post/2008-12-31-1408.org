#+POSTID: 1408
#+DATE: [2008-12-31 Wed 03:50]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
#+CATEGORY: Article
#+TAGS: PLT, Programming Language, Scheme
#+TITLE: Dynamically avoiding duplicate identifiers in PLT Scheme

In [[http://list.cs.brown.edu/pipermail/plt-scheme/2008-December/029185.html][this thread]] on the PLT discussion list, the original poster was encountering a problem while implementing a DSL where definitions were getting defined more than once in the code that he was generating. The problem is that the define function will not define the same name twice:



#+BEGIN_EXAMPLE
    
(define x 10)
(define x 12) 
=> duplicate definition for identifier in: x

#+END_EXAMPLE



The solution would be to check if the given name is already bound before defining: if it was not defined, the define function should be used, otherwise the set! function should be used:



#+BEGIN_EXAMPLE
    
(define x 10)
(set! x 12) 

#+END_EXAMPLE



Here is Andre's solution from the thread:



#+BEGIN_EXAMPLE
    
(define-syntax define-if-not
  (Î» (stx)
    (syntax-case stx ()
      [(_ var val)
       (with-syntax ([set!define (if (identifier-binding #'var 0)
                                      #'set! 
                                      #'define)])
         (syntax
          (set!define var val)))])))

#+END_EXAMPLE



[[http://www.cs.brown.edu/courses/csci1730/2008/Manual/reference/stxcmp.html#(def._((quote._~23~25kernel)._identifier-binding))][identifier-binding]] returns true unless the name is a [[file:/C:/PLT-4.1.3/doc/reference/syntax-model.html#(tech._top._level._binding)][top level binding]] or is not bound at all. If the name is already bound, use set!; otherwise use define.



