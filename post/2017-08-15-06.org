#+BLOG: wisdomandwonder
#+POSTID: 10669
#+ORG2BLOG:
#+DATE: [2017-08-15 Tue 19:42]
#+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil
#+CATEGORY: Article
#+TAGS: Programming Language, Go Lang, GBEN
#+TITLE: (Go Lang) Maps (GBEN)

[[https://gobyexample.com/maps][Go by Example]]
* Example
- Maps are maps
- Getter returns a second result, a boolean, telling of the key was present
#+HTML: <!--more-->
#+NAME: org_gcr_2017-08-15_mara_779A0030-5AD9-4C66-ADC3-ADA931E3225E
#+BEGIN_SRC go :imports '("fmt") :results output
// To create an empty map, use the builtin make: make(map[key-type]val-type).
m := make(map[string]int)
// Set key/value pairs using typical name[key] = val syntax.
m["k1"] = 7
m["k2"] = 13
// Printing a map with e.g. Println will show all of its key/value pairs.
fmt.Println("map:", m)
// Get a value for a key with name[key].
v1 := m["k1"]
fmt.Println("v1: ", v1)
// The builtin len returns the number of key/value pairs when called on a map.
fmt.Println("len:", len(m))
// The builtin delete removes key/value pairs from a map.
delete(m, "k2")
fmt.Println("map:", m)
// The optional second return value when getting a value from a map indicates
// if the key was present in the map. This can be used to disambiguate between
// missing keys and keys with zero values like 0 or "". Here we didnâ€™t need
// the value itself, so we ignored it with the blank identifier _.
_, prs := m["k2"]
fmt.Println("prs:", prs)
// You can also declare and initialize a new map in the same line with this
// syntax.
n := map[string]int{"foo": 1, "bar": 2}
fmt.Println("map:", n)
#+END_SRC

#+RESULTS: org_gcr_2017-08-15_mara_779A0030-5AD9-4C66-ADC3-ADA931E3225E
#+BEGIN_EXAMPLE
map: map[k1:7 k2:13]
v1:  7
len: 2
map: map[k1:7]
prs: false
map: map[foo:1 bar:2]
#+END_EXAMPLE

[[https://www.wisdomandwonder.com/article/10651/go-lang-go-by-example-notes-gben][Attribution]]
